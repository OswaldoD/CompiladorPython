
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 22 15:54:21 CST 2016
//----------------------------------------------------

package analizadorSintactico;

import java.io.*;
import java.util.ArrayList;
import java.util.Stack;
import java_cup.runtime.*;
import java.io.FileReader;
import analizadorSintactico.Datos_Guardados;
import analizadorSintactico.FileManager;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 22 15:54:21 CST 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\050\002\000\002\042\006\000\002\002" +
    "\004\000\002\042\010\000\002\003\014\000\002\003\004" +
    "\000\002\003\002\000\002\007\005\000\002\007\002\000" +
    "\002\010\006\000\002\010\002\000\002\004\006\000\002" +
    "\004\004\000\002\004\002\000\002\005\005\000\002\005" +
    "\004\000\002\005\002\000\002\011\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\002\000\002\013\004\000\002\013\002\000\002\014" +
    "\005\000\002\014\004\000\002\033\003\000\002\033\003" +
    "\000\002\025\005\000\002\025\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\002\000\002\027\004\000\002" +
    "\027\003\000\002\030\004\000\002\030\005\000\002\031" +
    "\005\000\002\031\004\000\002\032\004\000\002\032\003" +
    "\000\002\032\002\000\002\035\011\000\002\035\011\000" +
    "\002\035\011\000\002\035\004\000\002\036\014\000\002" +
    "\036\004\000\002\051\002\000\002\052\002\000\002\037" +
    "\013\000\002\037\004\000\002\040\007\000\002\040\004" +
    "\000\002\040\002\000\002\053\002\000\002\054\002\000" +
    "\002\041\010\000\002\041\004\000\002\041\002\000\002" +
    "\043\014\000\002\043\004\000\002\043\007\000\002\044" +
    "\006\000\002\044\004\000\002\044\002\000\002\045\007" +
    "\000\002\045\004\000\002\046\005\000\002\046\002\000" +
    "\002\047\006\000\002\047\005\000\002\047\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\006" +
    "\000\002\021\004\000\002\022\006\000\002\022\004\000" +
    "\002\022\004\000\002\023\005\000\002\023\005\000\002" +
    "\023\002\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\050\002\ufffb\003\ufffb\004\005\013\ufffb\015" +
    "\ufffb\016\ufffb\017\006\030\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\045\ufffb\046" +
    "\ufffb\067\ufffb\001\002\000\004\002\363\001\002\000\006" +
    "\003\350\067\351\001\002\000\004\067\343\001\002\000" +
    "\044\002\ufff4\003\014\013\ufff4\015\ufff4\016\ufff4\030\ufff4" +
    "\032\017\033\ufff4\034\ufff4\037\010\040\021\041\016\042" +
    "\015\043\011\045\013\046\022\067\ufff4\001\002\000\004" +
    "\067\uffb3\001\002\000\004\067\uffad\001\002\000\022\002" +
    "\001\013\001\015\001\016\001\030\001\033\001\034\001" +
    "\067\001\001\002\000\004\067\uffb2\001\002\000\050\002" +
    "\ufff4\003\014\004\ufff4\013\ufff4\015\ufff4\016\ufff4\030\ufff4" +
    "\032\017\033\ufff4\034\ufff4\037\010\040\021\041\016\042" +
    "\015\043\011\045\013\046\022\065\ufff4\067\ufff4\001\002" +
    "\000\004\067\uffae\001\002\000\004\067\uffaf\001\002\000" +
    "\004\067\uffb4\001\002\000\004\067\023\001\002\000\004" +
    "\067\uffb0\001\002\000\004\067\uffb1\001\002\000\052\002" +
    "\ufff1\003\ufff1\004\ufff1\013\ufff1\015\ufff1\016\ufff1\030\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\037\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\045\ufff1\046\ufff1\063\024\065\ufff1\067\ufff1" +
    "\001\002\000\006\003\027\067\030\001\002\000\050\002" +
    "\ufff4\003\014\004\ufff4\013\ufff4\015\ufff4\016\ufff4\030\ufff4" +
    "\032\017\033\ufff4\034\ufff4\037\010\040\021\041\016\042" +
    "\015\043\011\045\013\046\022\065\ufff4\067\ufff4\001\002" +
    "\000\026\002\ufff6\004\ufff6\013\ufff6\015\ufff6\016\ufff6\030" +
    "\ufff6\033\ufff6\034\ufff6\065\ufff6\067\ufff6\001\002\000\050" +
    "\002\ufff2\003\ufff2\004\ufff2\013\ufff2\015\ufff2\016\ufff2\030" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\037\ufff2\040\ufff2\041\ufff2" +
    "\042\ufff2\043\ufff2\045\ufff2\046\ufff2\065\ufff2\067\ufff2\001" +
    "\002\000\052\002\ufff1\003\ufff1\004\ufff1\013\ufff1\015\ufff1" +
    "\016\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\063\024" +
    "\065\ufff1\067\ufff1\001\002\000\050\002\ufff3\003\ufff3\004" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\030\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\045" +
    "\ufff3\046\ufff3\065\ufff3\067\ufff3\001\002\000\026\002\ufff5" +
    "\004\ufff5\013\ufff5\015\ufff5\016\ufff5\030\ufff5\033\ufff5\034" +
    "\ufff5\065\ufff5\067\ufff5\001\002\000\022\002\uffe6\013\uffe6" +
    "\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6\067\036\001" +
    "\002\000\004\002\000\001\002\000\024\002\uffe8\013\203" +
    "\015\200\016\211\030\214\033\213\034\205\065\uffe8\067" +
    "\215\001\002\000\024\003\045\114\040\115\041\116\050" +
    "\117\044\120\042\121\037\122\051\123\043\001\002\000" +
    "\026\051\uff8d\053\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\061\uff8d\062\uff8d\067\uff8d\073\uff8d\001\002\000\026\051" +
    "\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92" +
    "\062\uff92\067\uff92\073\uff92\001\002\000\026\051\uff91\053" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\067\uff91\073\uff91\001\002\000\026\051\uff8e\053\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\067\uff8e" +
    "\073\uff8e\001\002\000\026\051\uff8b\053\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\067\uff8b\073\uff8b" +
    "\001\002\000\026\051\uff8f\053\uff8f\055\uff8f\056\uff8f\057" +
    "\uff8f\060\uff8f\061\uff8f\062\uff8f\067\uff8f\073\uff8f\001\002" +
    "\000\024\002\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033" +
    "\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\026\051\055" +
    "\053\061\055\057\056\052\057\063\060\067\061\064\062" +
    "\053\067\071\073\060\001\002\000\024\002\uffe7\013\uffe7" +
    "\015\uffe7\016\uffe7\030\uffe7\033\uffe7\034\uffe7\065\uffe7\067" +
    "\uffe7\001\002\000\026\051\uff90\053\uff90\055\uff90\056\uff90" +
    "\057\uff90\060\uff90\061\uff90\062\uff90\067\uff90\073\uff90\001" +
    "\002\000\026\051\uff8c\053\uff8c\055\uff8c\056\uff8c\057\uff8c" +
    "\060\uff8c\061\uff8c\062\uff8c\067\uff8c\073\uff8c\001\002\000" +
    "\100\002\uffa2\003\uffa2\013\uffa2\015\uffa2\016\uffa2\030\uffa2" +
    "\033\uffa2\034\uffa2\052\uffa2\054\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\067\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2" +
    "\104\uffa2\105\uffa2\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130" +
    "\uffa2\131\uffa2\132\uffa2\133\uffa2\134\uffa2\135\uffa2\001\002" +
    "\000\100\002\uffa9\003\uffa9\013\uffa9\015\uffa9\016\uffa9\030" +
    "\uffa9\033\uffa9\034\uffa9\052\uffa9\054\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\067\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9" +
    "\130\uffa9\131\uffa9\132\uffa9\133\uffa9\134\uffa9\135\uffa9\001" +
    "\002\000\030\002\uffe3\013\uffe3\015\uffe3\016\uffe3\030\uffe3" +
    "\033\uffe3\034\uffe3\054\uffe3\063\uffe3\065\uffe3\067\uffe3\001" +
    "\002\000\030\003\165\051\055\052\163\055\057\056\052" +
    "\057\063\060\067\061\064\062\053\067\071\073\060\001" +
    "\002\000\074\002\uffdd\003\130\013\uffdd\015\uffdd\016\uffdd" +
    "\030\uffdd\033\uffdd\034\uffdd\054\uffdd\063\uffdd\065\uffdd\067" +
    "\uffdd\077\132\100\134\101\123\102\126\103\111\104\121" +
    "\105\131\124\127\125\114\126\124\127\135\130\110\131" +
    "\133\132\125\133\112\134\115\135\120\001\002\000\100" +
    "\002\uffa5\003\uffa5\013\uffa5\015\uffa5\016\uffa5\030\uffa5\033" +
    "\uffa5\034\uffa5\052\uffa5\054\uffa5\063\uffa5\064\uffa5\065\uffa5" +
    "\067\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104" +
    "\uffa5\105\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5" +
    "\131\uffa5\132\uffa5\133\uffa5\134\uffa5\135\uffa5\001\002\000" +
    "\100\002\uffa8\003\uffa8\013\uffa8\015\uffa8\016\uffa8\030\uffa8" +
    "\033\uffa8\034\uffa8\052\uffa8\054\uffa8\063\uffa8\064\uffa8\065" +
    "\uffa8\067\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\124\uffa8\125\uffa8\126\uffa8\127\uffa8\130" +
    "\uffa8\131\uffa8\132\uffa8\133\uffa8\134\uffa8\135\uffa8\001\002" +
    "\000\024\051\055\055\057\056\052\057\063\060\067\061" +
    "\064\062\053\067\071\073\060\001\002\000\100\002\uffab" +
    "\003\uffab\013\uffab\015\uffab\016\uffab\030\uffab\033\uffab\034" +
    "\uffab\052\uffab\054\uffab\063\uffab\064\uffab\065\uffab\067\uffab" +
    "\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105" +
    "\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131\uffab" +
    "\132\uffab\133\uffab\134\uffab\135\uffab\001\002\000\100\002" +
    "\uffa4\003\uffa4\013\uffa4\015\uffa4\016\uffa4\030\uffa4\033\uffa4" +
    "\034\uffa4\052\uffa4\054\uffa4\063\uffa4\064\uffa4\065\uffa4\067" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131" +
    "\uffa4\132\uffa4\133\uffa4\134\uffa4\135\uffa4\001\002\000\100" +
    "\002\uffaa\003\uffaa\013\uffaa\015\uffaa\016\uffaa\030\uffaa\033" +
    "\uffaa\034\uffaa\052\uffaa\054\uffaa\063\uffaa\064\uffaa\065\uffaa" +
    "\067\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa" +
    "\131\uffaa\132\uffaa\133\uffaa\134\uffaa\135\uffaa\001\002\000" +
    "\100\002\uffa6\003\uffa6\013\uffa6\015\uffa6\016\uffa6\030\uffa6" +
    "\033\uffa6\034\uffa6\052\uffa6\054\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\067\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130" +
    "\uffa6\131\uffa6\132\uffa6\133\uffa6\134\uffa6\135\uffa6\001\002" +
    "\000\030\002\uffe2\013\uffe2\015\uffe2\016\uffe2\030\uffe2\033" +
    "\uffe2\034\uffe2\054\uffe2\063\uffe2\065\uffe2\067\uffe2\001\002" +
    "\000\100\002\uffa3\003\uffa3\013\uffa3\015\uffa3\016\uffa3\030" +
    "\uffa3\033\uffa3\034\uffa3\052\uffa3\054\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\067\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3" +
    "\130\uffa3\131\uffa3\132\uffa3\133\uffa3\134\uffa3\135\uffa3\001" +
    "\002\000\024\002\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6" +
    "\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\102\002" +
    "\uffac\003\uffac\013\uffac\015\uffac\016\uffac\030\uffac\033\uffac" +
    "\034\uffac\052\uffac\053\073\054\uffac\063\uffac\064\uffac\065" +
    "\uffac\067\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103\uffac" +
    "\104\uffac\105\uffac\124\uffac\125\uffac\126\uffac\127\uffac\130" +
    "\uffac\131\uffac\132\uffac\133\uffac\134\uffac\135\uffac\001\002" +
    "\000\100\002\uffa7\003\uffa7\013\uffa7\015\uffa7\016\uffa7\030" +
    "\uffa7\033\uffa7\034\uffa7\052\uffa7\054\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\067\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103" +
    "\uffa7\104\uffa7\105\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7" +
    "\130\uffa7\131\uffa7\132\uffa7\133\uffa7\134\uffa7\135\uffa7\001" +
    "\002\000\024\032\017\037\010\040\021\041\016\042\015" +
    "\043\011\045\013\046\022\054\ufff9\001\002\000\100\002" +
    "\uffa0\003\uffa0\013\uffa0\015\uffa0\016\uffa0\030\uffa0\033\uffa0" +
    "\034\uffa0\052\uffa0\054\uffa0\063\uffa0\064\uffa0\065\uffa0\067" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0" +
    "\105\uffa0\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131" +
    "\uffa0\132\uffa0\133\uffa0\134\uffa0\135\uffa0\001\002\000\004" +
    "\067\100\001\002\000\004\054\077\001\002\000\100\002" +
    "\uffa1\003\uffa1\013\uffa1\015\uffa1\016\uffa1\030\uffa1\033\uffa1" +
    "\034\uffa1\052\uffa1\054\uffa1\063\uffa1\064\uffa1\065\uffa1\067" +
    "\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1\104\uffa1" +
    "\105\uffa1\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130\uffa1\131" +
    "\uffa1\132\uffa1\133\uffa1\134\uffa1\135\uffa1\001\002\000\006" +
    "\054\ufff7\063\101\001\002\000\022\032\017\037\010\040" +
    "\021\041\016\042\015\043\011\045\013\046\022\001\002" +
    "\000\004\054\ufffa\001\002\000\004\067\104\001\002\000" +
    "\006\054\ufff7\063\101\001\002\000\004\054\ufff8\001\002" +
    "\000\024\002\uffe5\013\uffe5\015\uffe5\016\uffe5\030\uffe5\033" +
    "\uffe5\034\uffe5\065\uffe5\067\uffe5\001\002\000\074\002\uffdd" +
    "\003\130\013\uffdd\015\uffdd\016\uffdd\030\uffdd\033\uffdd\034" +
    "\uffdd\054\uffdd\063\uffdd\065\uffdd\067\uffdd\077\132\100\134" +
    "\101\123\102\126\103\111\104\121\105\131\124\127\125" +
    "\114\126\124\127\135\130\110\131\133\132\125\133\112" +
    "\134\115\135\120\001\002\000\024\051\uff86\055\uff86\056" +
    "\uff86\057\uff86\060\uff86\061\uff86\062\uff86\067\uff86\073\uff86" +
    "\001\002\000\024\051\uff95\055\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\067\uff95\073\uff95\001\002\000\024" +
    "\051\uff83\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062" +
    "\uff83\067\uff83\073\uff83\001\002\000\030\002\uffe1\013\uffe1" +
    "\015\uffe1\016\uffe1\030\uffe1\033\uffe1\034\uffe1\054\uffe1\063" +
    "\uffe1\065\uffe1\067\uffe1\001\002\000\024\051\uff89\055\uff89" +
    "\056\uff89\057\uff89\060\uff89\061\uff89\062\uff89\067\uff89\073" +
    "\uff89\001\002\000\024\051\uff81\055\uff81\056\uff81\057\uff81" +
    "\060\uff81\061\uff81\062\uff81\067\uff81\073\uff81\001\002\000" +
    "\024\051\055\055\057\056\052\057\063\060\067\061\064" +
    "\062\053\067\071\073\060\001\002\000\024\051\055\055" +
    "\057\056\052\057\063\060\067\061\064\062\053\067\071" +
    "\073\060\001\002\000\024\051\uff82\055\uff82\056\uff82\057" +
    "\uff82\060\uff82\061\uff82\062\uff82\067\uff82\073\uff82\001\002" +
    "\000\024\051\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\067\uff94\073\uff94\001\002\000\032\002\uffd9" +
    "\013\uffd9\015\uffd9\016\uffd9\030\uffd9\033\uffd9\034\uffd9\054" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\067\uffd9\001\002\000\024" +
    "\051\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\067\uff99\073\uff99\001\002\000\024\051\uff88\055\uff88" +
    "\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\067\uff88\073" +
    "\uff88\001\002\000\024\051\uff84\055\uff84\056\uff84\057\uff84" +
    "\060\uff84\061\uff84\062\uff84\067\uff84\073\uff84\001\002\000" +
    "\024\051\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96" +
    "\062\uff96\067\uff96\073\uff96\001\002\000\024\051\uff8a\055" +
    "\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\067\uff8a" +
    "\073\uff8a\001\002\000\026\051\055\053\137\055\057\056" +
    "\052\057\063\060\067\061\064\062\053\067\071\073\060" +
    "\001\002\000\024\051\uff93\055\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\067\uff93\073\uff93\001\002\000\024" +
    "\051\uff98\055\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062" +
    "\uff98\067\uff98\073\uff98\001\002\000\024\051\uff85\055\uff85" +
    "\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\067\uff85\073" +
    "\uff85\001\002\000\024\051\uff97\055\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\067\uff97\073\uff97\001\002\000" +
    "\024\051\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87" +
    "\062\uff87\067\uff87\073\uff87\001\002\000\074\002\uffdd\003" +
    "\130\013\uffdd\015\uffdd\016\uffdd\030\uffdd\033\uffdd\034\uffdd" +
    "\054\146\063\uffdd\065\uffdd\067\uffdd\077\132\100\134\101" +
    "\123\102\126\103\111\104\121\105\131\124\127\125\114" +
    "\126\124\127\135\130\110\131\133\132\125\133\112\134" +
    "\115\135\120\001\002\000\024\051\055\055\057\056\052" +
    "\057\063\060\067\061\064\062\053\067\071\073\060\001" +
    "\002\000\032\002\uffd7\013\uffd7\015\uffd7\016\uffd7\030\uffd7" +
    "\033\uffd7\034\uffd7\054\uffd7\063\uffd7\064\uffd7\065\uffd7\067" +
    "\uffd7\001\002\000\030\003\142\124\127\125\114\126\124" +
    "\127\135\130\110\131\133\132\125\133\112\134\115\135" +
    "\120\001\002\000\026\051\055\053\137\055\057\056\052" +
    "\057\063\060\067\061\064\062\053\067\071\073\060\001" +
    "\002\000\030\003\142\124\127\125\114\126\124\127\135" +
    "\130\110\131\133\132\125\133\112\134\115\135\120\001" +
    "\002\000\032\002\uffda\013\uffda\015\uffda\016\uffda\030\uffda" +
    "\033\uffda\034\uffda\054\uffda\063\uffda\064\uffda\065\uffda\067" +
    "\uffda\001\002\000\030\002\uffdb\013\uffdb\015\uffdb\016\uffdb" +
    "\030\uffdb\033\uffdb\034\uffdb\054\uffdb\063\uffdb\065\uffdb\067" +
    "\uffdb\001\002\000\050\002\uffdd\003\150\013\uffdd\015\uffdd" +
    "\016\uffdd\030\uffdd\033\uffdd\034\uffdd\054\uffdd\063\uffdd\065" +
    "\uffdd\067\uffdd\077\132\100\134\101\123\102\126\103\111" +
    "\104\121\105\131\001\002\000\030\002\uffde\013\uffde\015" +
    "\uffde\016\uffde\030\uffde\033\uffde\034\uffde\054\uffde\063\uffde" +
    "\065\uffde\067\uffde\001\002\000\024\051\055\055\057\056" +
    "\052\057\063\060\067\061\064\062\053\067\071\073\060" +
    "\001\002\000\030\002\uffdc\013\uffdc\015\uffdc\016\uffdc\030" +
    "\uffdc\033\uffdc\034\uffdc\054\uffdc\063\uffdc\065\uffdc\067\uffdc" +
    "\001\002\000\050\002\uffdd\003\150\013\uffdd\015\uffdd\016" +
    "\uffdd\030\uffdd\033\uffdd\034\uffdd\054\146\063\uffdd\065\uffdd" +
    "\067\uffdd\077\132\100\134\101\123\102\126\103\111\104" +
    "\121\105\131\001\002\000\060\002\uffd4\003\142\013\uffd4" +
    "\015\uffd4\016\uffd4\030\uffd4\033\uffd4\034\uffd4\054\156\063" +
    "\uffd4\064\uffd4\065\uffd4\067\uffd4\124\127\125\114\126\124" +
    "\127\135\130\110\131\133\132\125\133\112\134\115\135" +
    "\120\001\002\000\032\002\uffd8\013\uffd8\015\uffd8\016\uffd8" +
    "\030\uffd8\033\uffd8\034\uffd8\054\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\067\uffd8\001\002\000\032\002\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\030\uffd5\033\uffd5\034\uffd5\054\uffd5\063\uffd5\064" +
    "\uffd5\065\uffd5\067\uffd5\001\002\000\060\002\uffd4\003\142" +
    "\013\uffd4\015\uffd4\016\uffd4\030\uffd4\033\uffd4\034\uffd4\054" +
    "\156\063\uffd4\064\uffd4\065\uffd4\067\uffd4\124\127\125\114" +
    "\126\124\127\135\130\110\131\133\132\125\133\112\134" +
    "\115\135\120\001\002\000\032\002\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\030\uffd6\033\uffd6\034\uffd6\054\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\067\uffd6\001\002\000\050\002\uffdd\003\150" +
    "\013\uffdd\015\uffdd\016\uffdd\030\uffdd\033\uffdd\034\uffdd\054" +
    "\146\063\uffdd\065\uffdd\067\uffdd\077\132\100\134\101\123" +
    "\102\126\103\111\104\121\105\131\001\002\000\030\002" +
    "\uffdf\013\uffdf\015\uffdf\016\uffdf\030\uffdf\033\uffdf\034\uffdf" +
    "\054\uffdf\063\uffdf\065\uffdf\067\uffdf\001\002\000\030\002" +
    "\uffe0\013\uffe0\015\uffe0\016\uffe0\030\uffe0\033\uffe0\034\uffe0" +
    "\054\uffe0\063\uffe0\065\uffe0\067\uffe0\001\002\000\100\002" +
    "\uff9e\003\uff9e\013\uff9e\015\uff9e\016\uff9e\030\uff9e\033\uff9e" +
    "\034\uff9e\052\uff9e\054\uff9e\063\uff9e\064\uff9e\065\uff9e\067" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e" +
    "\105\uff9e\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131" +
    "\uff9e\132\uff9e\133\uff9e\134\uff9e\135\uff9e\001\002\000\010" +
    "\003\167\052\uff9a\063\166\001\002\000\100\002\uff9d\003" +
    "\uff9d\013\uff9d\015\uff9d\016\uff9d\030\uff9d\033\uff9d\034\uff9d" +
    "\052\uff9d\054\uff9d\063\uff9d\064\uff9d\065\uff9d\067\uff9d\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d" +
    "\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d\132" +
    "\uff9d\133\uff9d\134\uff9d\135\uff9d\001\002\000\024\051\055" +
    "\055\057\056\052\057\063\060\067\061\064\062\053\067" +
    "\071\073\060\001\002\000\024\051\055\055\057\056\052" +
    "\057\063\060\067\061\064\062\053\067\071\073\060\001" +
    "\002\000\004\052\171\001\002\000\100\002\uff9f\003\uff9f" +
    "\013\uff9f\015\uff9f\016\uff9f\030\uff9f\033\uff9f\034\uff9f\052" +
    "\uff9f\054\uff9f\063\uff9f\064\uff9f\065\uff9f\067\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\124" +
    "\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\132\uff9f" +
    "\133\uff9f\134\uff9f\135\uff9f\001\002\000\010\003\167\052" +
    "\uff9a\063\166\001\002\000\004\052\uff9b\001\002\000\010" +
    "\003\167\052\uff9a\063\166\001\002\000\004\052\uff9c\001" +
    "\002\000\024\002\uffe4\013\uffe4\015\uffe4\016\uffe4\030\uffe4" +
    "\033\uffe4\034\uffe4\065\uffe4\067\uffe4\001\002\000\024\002" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\065\uffe6\067\036\001\002\000\006\003\333\053\332\001" +
    "\002\000\024\002\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6" +
    "\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\024\002" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\065\uffe6\067\036\001\002\000\006\003\310\053\307\001" +
    "\002\000\024\002\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6" +
    "\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\006\003" +
    "\266\064\267\001\002\000\024\002\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036\001" +
    "\002\000\024\002\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6" +
    "\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\024\002" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\065\uffe6\067\036\001\002\000\006\003\257\053\256\001" +
    "\002\000\006\002\ufff0\065\ufff0\001\002\000\030\003\231" +
    "\051\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\067\uffcd\073\uffcd\001\002\000\006\003\216" +
    "\067\217\001\002\000\006\003\074\053\073\001\002\000" +
    "\024\002\uffce\013\uffce\015\uffce\016\uffce\030\uffce\033\uffce" +
    "\034\uffce\065\uffce\067\uffce\001\002\000\004\075\220\001" +
    "\002\000\004\044\221\001\002\000\004\053\222\001\002" +
    "\000\026\051\055\053\061\055\057\056\052\057\063\060" +
    "\067\061\064\062\053\067\071\073\060\001\002\000\004" +
    "\054\224\001\002\000\004\064\225\001\002\000\022\013" +
    "\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6" +
    "\067\036\001\002\000\004\065\227\001\002\000\024\002" +
    "\uffcf\013\uffcf\015\uffcf\016\uffcf\030\uffcf\033\uffcf\034\uffcf" +
    "\065\uffcf\067\uffcf\001\002\000\026\051\055\053\137\055" +
    "\057\056\052\057\063\060\067\061\064\062\053\067\071" +
    "\073\060\001\002\000\024\002\uffca\013\uffca\015\uffca\016" +
    "\uffca\030\uffca\033\uffca\034\uffca\065\uffca\067\uffca\001\002" +
    "\000\004\064\uffcc\001\002\000\004\064\234\001\002\000" +
    "\022\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\065\uffe6\067\036\001\002\000\004\065\236\001\002\000" +
    "\030\002\uffc7\013\uffc7\015\uffc7\016\uffc7\025\240\026\uffc7" +
    "\030\uffc7\033\uffc7\034\uffc7\065\uffc7\067\uffc7\001\002\000" +
    "\026\002\uffc2\013\uffc2\015\uffc2\016\uffc2\026\247\030\uffc2" +
    "\033\uffc2\034\uffc2\065\uffc2\067\uffc2\001\002\000\030\003" +
    "\241\051\055\053\137\055\057\056\052\057\063\060\067" +
    "\061\064\062\053\067\071\073\060\001\002\000\026\002" +
    "\uffc8\013\uffc8\015\uffc8\016\uffc8\026\uffc8\030\uffc8\033\uffc8" +
    "\034\uffc8\065\uffc8\067\uffc8\001\002\000\004\064\243\001" +
    "\002\000\022\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6" +
    "\034\uffe6\065\uffe6\067\036\001\002\000\004\065\245\001" +
    "\002\000\026\002\uffc9\013\uffc9\015\uffc9\016\uffc9\026\uffc9" +
    "\030\uffc9\033\uffc9\034\uffc9\065\uffc9\067\uffc9\001\002\000" +
    "\024\002\uffcb\013\uffcb\015\uffcb\016\uffcb\030\uffcb\033\uffcb" +
    "\034\uffcb\065\uffcb\067\uffcb\001\002\000\006\003\251\064" +
    "\uffc6\001\002\000\004\064\252\001\002\000\024\002\uffc3" +
    "\013\uffc3\015\uffc3\016\uffc3\030\uffc3\033\uffc3\034\uffc3\065" +
    "\uffc3\067\uffc3\001\002\000\022\013\uffc5\015\uffc5\016\uffc5" +
    "\030\uffc5\033\uffc5\034\uffc5\065\uffc5\067\uffc5\001\002\000" +
    "\022\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\065\uffe6\067\036\001\002\000\004\065\255\001\002\000" +
    "\024\002\uffc4\013\uffc4\015\uffc4\016\uffc4\030\uffc4\033\uffc4" +
    "\034\uffc4\065\uffc4\067\uffc4\001\002\000\006\003\260\067" +
    "\261\001\002\000\024\002\uffb5\013\uffb5\015\uffb5\016\uffb5" +
    "\030\uffb5\033\uffb5\034\uffb5\065\uffb5\067\uffb5\001\002\000" +
    "\024\002\uffb6\013\uffb6\015\uffb6\016\uffb6\030\uffb6\033\uffb6" +
    "\034\uffb6\065\uffb6\067\uffb6\001\002\000\004\054\262\001" +
    "\002\000\024\002\uffb7\013\uffb7\015\uffb7\016\uffb7\030\uffb7" +
    "\033\uffb7\034\uffb7\065\uffb7\067\uffb7\001\002\000\006\002" +
    "\uffef\065\uffef\001\002\000\006\002\uffe9\065\uffe9\001\002" +
    "\000\006\002\uffea\065\uffea\001\002\000\024\002\uffc0\013" +
    "\uffc0\015\uffc0\016\uffc0\030\uffc0\033\uffc0\034\uffc0\065\uffc0" +
    "\067\uffc0\001\002\000\022\013\uffe6\015\uffe6\016\uffe6\030" +
    "\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000\004" +
    "\065\271\001\002\000\006\003\272\011\273\001\002\000" +
    "\024\002\uffbf\013\uffbf\015\uffbf\016\uffbf\030\uffbf\033\uffbf" +
    "\034\uffbf\065\uffbf\067\uffbf\001\002\000\004\067\274\001" +
    "\002\000\004\064\275\001\002\000\022\013\uffe6\015\uffe6" +
    "\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036\001" +
    "\002\000\004\065\277\001\002\000\026\002\uffbc\013\uffbc" +
    "\015\uffbc\016\uffbc\030\uffbc\033\uffbc\034\uffbc\036\300\065" +
    "\uffbc\067\uffbc\001\002\000\006\003\302\064\303\001\002" +
    "\000\024\002\uffc1\013\uffc1\015\uffc1\016\uffc1\030\uffc1\033" +
    "\uffc1\034\uffc1\065\uffc1\067\uffc1\001\002\000\024\002\uffbd" +
    "\013\uffbd\015\uffbd\016\uffbd\030\uffbd\033\uffbd\034\uffbd\065" +
    "\uffbd\067\uffbd\001\002\000\022\013\uffe6\015\uffe6\016\uffe6" +
    "\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036\001\002\000" +
    "\004\065\305\001\002\000\024\002\uffbe\013\uffbe\015\uffbe" +
    "\016\uffbe\030\uffbe\033\uffbe\034\uffbe\065\uffbe\067\uffbe\001" +
    "\002\000\006\002\uffee\065\uffee\001\002\000\026\051\055" +
    "\053\137\055\057\056\052\057\063\060\067\061\312\062" +
    "\311\067\071\073\060\001\002\000\024\002\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\030\uffd0\033\uffd0\034\uffd0\065\uffd0\067" +
    "\uffd0\001\002\000\032\003\uffa9\054\324\124\uffa9\125\uffa9" +
    "\126\uffa9\127\uffa9\130\uffa9\131\uffa9\132\uffa9\133\uffa9\134" +
    "\uffa9\135\uffa9\001\002\000\032\003\uffaa\054\320\124\uffaa" +
    "\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131\uffaa\132\uffaa\133" +
    "\uffaa\134\uffaa\135\uffaa\001\002\000\004\054\314\001\002" +
    "\000\004\064\315\001\002\000\022\013\uffe6\015\uffe6\016" +
    "\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036\001\002" +
    "\000\004\065\317\001\002\000\024\002\uffd3\013\uffd3\015" +
    "\uffd3\016\uffd3\030\uffd3\033\uffd3\034\uffd3\065\uffd3\067\uffd3" +
    "\001\002\000\004\064\321\001\002\000\022\013\uffe6\015" +
    "\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067\036" +
    "\001\002\000\004\065\323\001\002\000\024\002\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\030\uffd2\033\uffd2\034\uffd2\065\uffd2" +
    "\067\uffd2\001\002\000\004\064\325\001\002\000\022\013" +
    "\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6" +
    "\067\036\001\002\000\004\065\327\001\002\000\024\002" +
    "\uffd1\013\uffd1\015\uffd1\016\uffd1\030\uffd1\033\uffd1\034\uffd1" +
    "\065\uffd1\067\uffd1\001\002\000\006\002\uffed\065\uffed\001" +
    "\002\000\006\002\uffec\065\uffec\001\002\000\026\051\055" +
    "\053\061\055\057\056\052\057\063\060\067\061\064\062" +
    "\053\067\071\073\060\001\002\000\024\002\uffba\013\uffba" +
    "\015\uffba\016\uffba\030\uffba\033\uffba\034\uffba\065\uffba\067" +
    "\uffba\001\002\000\006\054\uffb8\063\335\001\002\000\026" +
    "\051\055\053\061\055\057\056\052\057\063\060\067\061" +
    "\064\062\053\067\071\073\060\001\002\000\004\054\337" +
    "\001\002\000\024\002\uffbb\013\uffbb\015\uffbb\016\uffbb\030" +
    "\uffbb\033\uffbb\034\uffbb\065\uffbb\067\uffbb\001\002\000\006" +
    "\054\uffb8\063\335\001\002\000\004\054\uffb9\001\002\000" +
    "\006\002\uffeb\065\uffeb\001\002\000\004\064\344\001\002" +
    "\000\046\002\ufff4\003\014\004\ufff4\013\ufff4\015\ufff4\016" +
    "\ufff4\030\ufff4\032\017\033\ufff4\034\ufff4\037\010\040\021" +
    "\041\016\042\015\043\011\045\013\046\022\067\ufff4\001" +
    "\002\000\024\002\ufffb\004\005\013\ufffb\015\ufffb\016\ufffb" +
    "\030\ufffb\033\ufffb\034\ufffb\067\ufffb\001\002\000\022\002" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6" +
    "\067\036\001\002\000\004\002\ufffe\001\002\000\044\002" +
    "\ufffc\003\ufffc\013\ufffc\015\ufffc\016\ufffc\030\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\045\ufffc\046\ufffc\067\ufffc\001\002\000\004\053\352" +
    "\001\002\000\024\032\017\037\010\040\021\041\016\042" +
    "\015\043\011\045\013\046\022\054\ufff9\001\002\000\004" +
    "\054\354\001\002\000\004\064\355\001\002\000\044\003" +
    "\014\013\ufff4\015\ufff4\016\ufff4\030\ufff4\032\017\033\ufff4" +
    "\034\ufff4\037\010\040\021\041\016\042\015\043\011\045" +
    "\013\046\022\065\ufff4\067\ufff4\001\002\000\022\013\uffe6" +
    "\015\uffe6\016\uffe6\030\uffe6\033\uffe6\034\uffe6\065\uffe6\067" +
    "\036\001\002\000\004\065\361\001\002\000\046\002\ufffb" +
    "\003\ufffb\004\005\013\ufffb\015\ufffb\016\ufffb\030\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\045\ufffb\046\ufffb\067\ufffb\001\002\000\046\002" +
    "\uff80\003\uff80\004\uff80\013\uff80\015\uff80\016\uff80\030\uff80" +
    "\032\uff80\033\uff80\034\uff80\037\uff80\040\uff80\041\uff80\042" +
    "\uff80\043\uff80\045\uff80\046\uff80\067\uff80\001\002\000\044" +
    "\002\ufffd\003\ufffd\013\ufffd\015\ufffd\016\ufffd\030\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\045\ufffd\046\ufffd\067\ufffd\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\006\003\006\042\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\011" +
    "\006\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\032\001\001\000\002\001\001\000\006\004\031" +
    "\006\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\024\001\001\000\002\001\001\000" +
    "\006\004\025\006\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\033\013\034\001\001\000\002" +
    "\001\001\000\022\012\211\021\206\035\200\036\201\037" +
    "\176\043\205\045\207\047\203\001\001\000\006\014\046" +
    "\016\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\175\001\001\000\020\017\055\020" +
    "\061\021\064\022\071\025\053\030\065\033\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\163\020\061\021\064\022\071\001\001\000\012\015" +
    "\115\024\116\026\161\031\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\106\020\061\021\064\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\074\007\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\101\001\001\000\004\006\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\115\024" +
    "\116\026\112\031\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\157\020\061\021\064" +
    "\022\071\001\001\000\012\017\152\020\061\021\064\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\017\135" +
    "\020\061\021\064\022\071\030\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\115\024\116\026\144\027" +
    "\146\031\143\001\001\000\012\017\140\020\061\021\064" +
    "\022\071\001\001\000\002\001\001\000\006\024\116\031" +
    "\121\001\001\000\014\017\142\020\061\021\064\022\071" +
    "\030\137\001\001\000\006\024\116\031\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\115\026\150" +
    "\001\001\000\002\001\001\000\012\017\151\020\061\021" +
    "\064\022\071\001\001\000\002\001\001\000\010\015\115" +
    "\026\144\027\146\001\001\000\010\024\116\031\154\032" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\024\116\031\154\032\156\001\001\000\002\001\001\000" +
    "\010\015\115\026\144\027\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\167\001" +
    "\001\000\002\001\001\000\012\017\173\020\061\021\064" +
    "\022\071\001\001\000\012\017\171\020\061\021\064\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\172\001\001\000\002\001\001\000\004\023\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\341" +
    "\013\034\001\001\000\002\001\001\000\006\011\330\013" +
    "\034\001\001\000\006\011\327\013\034\001\001\000\002" +
    "\001\001\000\006\011\305\013\034\001\001\000\002\001" +
    "\001\000\006\011\264\013\034\001\001\000\006\011\263" +
    "\013\034\001\001\000\006\011\262\013\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\227\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\017\055\020\061\021\064\022\071\025\053\030\065\033" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\225\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\142\020\061\021\064\022\071\030\231" +
    "\001\001\000\002\001\001\000\004\052\232\001\001\000" +
    "\002\001\001\000\006\011\234\013\034\001\001\000\002" +
    "\001\001\000\004\040\236\001\001\000\004\041\245\001" +
    "\001\000\014\017\142\020\061\021\064\022\071\030\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\243\013\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\252\001\001\000\006" +
    "\011\253\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\267\013\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\275\013\034\001\001\000\002\001\001\000" +
    "\004\044\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\303\013\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\142\020\061\021\064\022\071\030\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\315\013\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\321\013\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\325\013\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\055\020\061\021\064" +
    "\022\071\025\053\030\065\033\333\001\001\000\002\001" +
    "\001\000\004\046\335\001\001\000\020\017\055\020\061" +
    "\021\064\022\071\025\053\030\065\033\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\344\006\017\001\001\000\004\003\345\001\001" +
    "\000\006\011\346\013\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\074\007\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\355\006\017\001\001\000\006\011\356\013\034\001\001" +
    "\000\004\034\357\001\001\000\004\003\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public FileManager archivo_salida;
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
               // m.append(" in columna "+(s.left+1));
                if (s.right >= 0)
                    m.append(", en linea "+(s.right+1));
                    m.append(", texto \""+ s.value +"\"");
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void writeFile(){
         archivo_salida.fileWritter();
    }

    public void setArchivo(FileManager archivo_salida){
        this.archivo_salida = archivo_salida;
    }
    

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
 static boolean do_debug_parse = false;
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object table=null;
            if(do_debug_parse){
                table=asin.debug_parse();
            }
            else{
                table=asin.parse().value;
                //System.out.print("Que hay parse_tree: "+asin.parse().value);
            }  
            
            System.out.print("Que hay table: "+asin.parse().value);
            System.out.println("\n*** Resultados finales ***");

//        for(int i=0; i<=tabla_simbolos.size(); i++ ){
//            System.out.println("Tipo: "+tabla_simbolos.get(i).getTipo()+" | Identificador: "+tabla_simbolos.get(i).getIdentificador()+
//                                " | Valor: "+tabla_simbolos.get(i).getValor()+ " | Scope:"+ tabla_simbolos.get(i).getScope());
//        }
      //    asin.writeFile();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    ArrayList<Datos_Guardados> tabla_simbolos = new ArrayList<Datos_Guardados>();
    Stack<String> pilaSemantica = new Stack<String>();
    String tipoDato="";
    String identificador="";
    String valorDato="";
    String scope="";
    int terminacion = 1;
    FileManager archivo_salida = new FileManager();


    public void buscarRepetidos(Datos_Guardados datos){
        for(int i=0; i<tabla_simbolos.size(); i++ ){
            String identificadorIngresar="";
            if(tabla_simbolos.get(i).getIdentificador().equals(identificadorIngresar)){
                //no se inserta nada
            }
            else{
                tabla_simbolos.add(datos);
            }
        }
    }
    public void muestraTabla(){
        System.out.println("----Tabla de Simbolos----");
        for(int i = 0; i < tabla_simbolos.size(); i++){
            Datos_Guardados datos = tabla_simbolos.get(i);
            System.out.println("Tipo " + datos.getTipo() + "ID: "+ datos.getIdentificador() + "Valor: " + datos.getValor() + "Alcance: " + datos.getScope());
        }
    }

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TERMINADOR ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TERMINADOR",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OP_COMPARAR ::= OP_NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=not.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OP_COMPARAR ::= OP_OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=or.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OP_COMPARAR ::= OP_AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=and.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP_COMPARAR ::= OP_MENORIG 
            {
              Object RESULT =null;
		int menorIgualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int menorIgualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object menorIgual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=menorIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP_COMPARAR ::= OP_MAYORIG 
            {
              Object RESULT =null;
		int mayorIgualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mayorIgualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mayorIgual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=mayorIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP_COMPARAR ::= OP_DIF 
            {
              Object RESULT =null;
		int difleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=dif.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP_COMPARAR ::= OP_MENOR 
            {
              Object RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=menor.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP_COMPARAR ::= OP_MAYOR 
            {
              Object RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=mayor.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP_COMPARAR ::= OP_DIST 
            {
              Object RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int distright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object dist = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=dist.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP_COMPARAR ::= OP_CMPIGUAL 
            {
              Object RESULT =null;
		int cmpIgualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cmpIgualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object cmpIgual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=cmpIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP_ASG ::= OP_ASG_DIVENT 
            {
              Object RESULT =null;
		int asigDivEntleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigDivEntright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigDivEnt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigDivEnt.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP_ASG ::= OP_ASG_POT 
            {
              Object RESULT =null;
		int asigPotleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigPotright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigPot = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigPot.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP_ASG ::= OP_ASG_MOD 
            {
              Object RESULT =null;
		int asigModleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigModright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigMod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigMod.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP_ASG ::= OP_ASG_DIV 
            {
              Object RESULT =null;
		int asigDivleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigDivright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigDiv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigDiv.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP_ASG ::= OP_ASG_MUL 
            {
              Object RESULT =null;
		int asigMultileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigMultiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigMulti = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigMulti.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OP_ASG ::= OP_ASG_RESTA 
            {
              Object RESULT =null;
		int asigRestaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigRestaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigResta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigResta.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OP_ASG ::= OP_ASG_SUMA 
            {
              Object RESULT =null;
		int asigSumaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int asigSumaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object asigSuma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=asigSuma.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OP_ASG ::= OP_IGUAL 
            {
              Object RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=igual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OP_ARIT ::= OP_DIVENT 
            {
              Object RESULT =null;
		int divisionEnteraleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int divisionEnteraright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object divisionEntera = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=divisionEntera.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_ARIT ::= OP_POT 
            {
              Object RESULT =null;
		int potencialeft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int potenciaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object potencia = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=potencia.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_ARIT ::= OP_MOD 
            {
              Object RESULT =null;
		int moduloleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int moduloright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object modulo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=modulo.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_ARIT ::= OP_DIV 
            {
              Object RESULT =null;
		int divisionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int divisionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object division = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=division.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_ARIT ::= OP_MUL 
            {
              Object RESULT =null;
		int multiplicacionleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int multiplicacionright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object multiplicacion = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=multiplicacion.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_ARIT ::= OP_RESTA 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=resta.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_ARIT ::= OP_SUMA 
            {
              Object RESULT =null;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		pilaSemantica.push("Local"); 
             tipoDato=suma.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MAS_TIPO_LISTA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MAS_TIPO_LISTA ::= error TIPO_DATO MAS_TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPO_LISTA ::= CONT_CORCHETE_ABRE error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TIPO_LISTA ::= CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPO_FUNC ::= IDENTIFICADOR error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_FUNC",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_FUNC",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPO_NUMERO ::= NUMERO_LONG 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		valorDato=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPO_NUMERO ::= NUMERO_COMPLEJO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		valorDato=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPO_NUMERO ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		valorDato=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPO_NUMERO ::= NUMERO_ENTERO 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		valorDato=valor.toString();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TIPO_DATO ::= TIPO_FUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TIPO_DATO ::= TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPO_DATO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPO_DATO ::= BOOL_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPO_DATO ::= BOOL_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPO_DATO ::= TIPO_NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPO_DATO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PR_TIPO_DATO ::= PR_CHAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PR_TIPO_DATO ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PR_TIPO_DATO ::= PR_STRING 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PR_TIPO_DATO ::= PR_LIST 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PR_TIPO_DATO ::= PR_COMPLEX 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PR_TIPO_DATO ::= PR_LONG 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PR_TIPO_DATO ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PR_TIPO_DATO ::= PR_INT 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 tipoDato=tipo.toString(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PR_TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INPUT ::= PR_INPUT error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INPUT",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INPUT ::= PR_INPUT CONT_PARENTESIS_ABRE error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INPUT",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INPUT ::= PR_INPUT CONT_PARENTESIS_ABRE IDENTIFICADOR CONT_PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int pr_inputleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int pr_inputright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object pr_input = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		pilaSemantica.push("Local");
               tipoDato=pr_input.toString();
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
               //buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
              // System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INPUT",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MAS_PRINT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PRINT",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MAS_PRINT ::= COMA EXPRESSION MAS_PRINT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PRINT",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRINT ::= PR_PRINT error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRINT",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRINT ::= PR_PRINT CONT_PARENTESIS_ABRE EXPRESSION MAS_PRINT CONT_PARENTESIS_CIERRA 
            {
              Object RESULT =null;
		int pr_printleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pr_printright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object pr_print = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		pilaSemantica.push("Local"); 
               tipoDato=pr_print.toString();                             
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop());
               //buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
               //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PRINT",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FINALLY_STMT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FINALLY_STMT",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FINALLY_STMT ::= PR_FINALLY error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FINALLY_STMT",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FINALLY_STMT ::= PR_FINALLY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FINALLY_STMT",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TRY_STMT ::= PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TRY_STMT",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TRY_STMT ::= PR_TRY error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TRY_STMT",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TRY_STMT ::= PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA PR_EXCEPT IDENTIFICADOR DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA FINALLY_STMT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TRY_STMT",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELSE_STMT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_STMT",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELSE_STMT ::= PR_ELSE error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_STMT",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELSE_STMT ::= PR_ELSE NT$3 DOS_PUNTOS NT$4 BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int pr_elseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int pr_elseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object pr_else = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 archivo_salida.almacenaIF(pilaSemantica.pop() + ":"); archivo_salida.almacenaIF("; BLOQUE SALIR"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELSE_STMT",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pr_elseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pr_elseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object pr_else = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
 archivo_salida.almacenaIF("; bloque else"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$3 ::= 
            {
              Object RESULT =null;
		int pr_elseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pr_elseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pr_else = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
String s = pilaSemantica.pop();
archivo_salida.almacenaIF("jmp " + pilaSemantica.peek()); 
archivo_salida.almacenaIF(s + ":"); 


              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELIF_STMT ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELIF_STMT",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELIF_STMT ::= PR_ELIF error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELIF_STMT",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELIF_STMT ::= PR_ELIF COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
		int pr_elifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int pr_elifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object pr_elif = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ELIF_STMT",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_STMT ::= PR_IF error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF_STMT ::= PR_IF NT$1 COMPARATIVA NT$2 DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA ELIF_STMT ELSE_STMT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int pr_ifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int pr_ifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object pr_if = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		int test_ifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int test_ifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object test_if = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("IF_STMT",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int pr_ifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int pr_ifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object pr_if = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int test_ifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int test_ifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object test_if = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 archivo_salida.almacenaIF("; comparativa"); archivo_salida.almacenaIF("jnz " + pilaSemantica.peek()); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$1 ::= 
            {
              Object RESULT =null;
		int pr_ifleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int pr_ifright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object pr_if = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 String etiqueta1 = archivo_salida.getEtiqueta(); 
archivo_salida.incCont(); 
System.out.println(etiqueta1);
archivo_salida.almacenaIF(etiqueta1 + ":");
archivo_salida.almacenaIF("; codigo de if"); 
pilaSemantica.push(archivo_salida.getEtiqueta());
archivo_salida.incCont();
pilaSemantica.push(archivo_salida.getEtiqueta()); 
archivo_salida.incCont(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR_STMT ::= PR_FOR error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR_STMT ::= PR_FOR IDENTIFICADOR COMP_IN PR_RANGE CONT_PARENTESIS_ABRE EXPRESSION CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
		int pr_forleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int pr_forright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object pr_for = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		pilaSemantica.push("Local"); 
             tipoDato=pr_for.toString();
             identificador=id.toString();
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FOR_STMT",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE_STMT ::= PR_WHILE error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE_STMT ::= PR_WHILE CONT_PARENTESIS_ABRE BOOL_FALSE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
		int pr_whileleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int pr_whileright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object pr_while = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE_STMT ::= PR_WHILE CONT_PARENTESIS_ABRE BOOL_TRUE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
		int pr_whileleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int pr_whileright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object pr_while = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WHILE_STMT ::= PR_WHILE CONT_PARENTESIS_ABRE COMPARATIVA CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA 
            {
              Object RESULT =null;
		int pr_whileleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).left;
		int pr_whileright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).right;
		Object pr_while = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;
		pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WHILE_STMT",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TMAS_COMPARATIVA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TMAS_COMPARATIVA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TMAS_COMPARATIVA ::= MAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TMAS_COMPARATIVA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TMAS_COMPARATIVA ::= CONT_PARENTESIS_CIERRA TMAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TMAS_COMPARATIVA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MAS_COMPARATIVA ::= error COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_COMPARATIVA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MAS_COMPARATIVA ::= OP_COMPARAR TIPO_DATO TMAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_COMPARATIVA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // COMPARATIVA ::= CONT_PARENTESIS_ABRE TIPO_DATO MAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMPARATIVA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // COMPARATIVA ::= TIPO_DATO MAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMPARATIVA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TMAS_ARITMETICA ::= MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TMAS_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TMAS_ARITMETICA ::= CONT_PARENTESIS_CIERRA MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TMAS_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MAS_ARITMETICA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MAS_ARITMETICA ::= error TIPO_DATO TMAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MAS_ARITMETICA ::= OP_ARIT TIPO_DATO TMAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ARITMETICA",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARITMETICA ::= TIPO_DATO MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARITMETICA ::= CONT_PARENTESIS_ABRE TIPO_DATO MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESSION ::= COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESSION ::= ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAS_ASIGNACION ::= error ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MAS_ASIGNACION ::= OP_ASG EXPRESSION ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASIGNACION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= IDENTIFICADOR MAS_ASIGNACION 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_BLOQUE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_BLOQUE ::= TIPO_FUNC BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_BLOQUE ::= TRY_STMT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_BLOQUE ::= IF_STMT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_BLOQUE ::= WHILE_STMT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_BLOQUE ::= FOR_STMT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_BLOQUE ::= INPUT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_BLOQUE ::= PRINT BLOQUE_CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_BLOQUE",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQUE_CODIGO ::= ASIGNACION TIPO_BLOQUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_CODIGO",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MAS_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MAS_VARIABLES ::= COMA error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAS_VARIABLES ::= COMA IDENTIFICADOR MAS_VARIABLES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		pilaSemantica.push("Local"); 
                identificador=id.toString(); 
                Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                buscarRepetidos(datos_simbolo);
                //tabla_simbolos.add(datos_simbolo);
                System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= error VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= PR_TIPO_DATO IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		pilaSemantica.push("Local"); 
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                buscarRepetidos(datos_simbolo);
                //tabla_simbolos.add(datos_simbolo);
               System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAS_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAS_PARAMETROS ::= COMA PR_TIPO_DATO IDENTIFICADOR MAS_PARAMETROS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		pilaSemantica.push("Local");                   
                   identificador=id.toString();               
                   Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                    buscarRepetidos(datos_simbolo);
                    //tabla_simbolos.add(datos_simbolo);
                  // System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                   
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARAMETROS ::= PR_TIPO_DATO IDENTIFICADOR MAS_PARAMETROS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		pilaSemantica.push("Local"); 
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
               buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
               System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCIONES ::= PR_DEF error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= PR_DEF IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_CODIGO TERMINADOR FUNCIONES 
            {
              Object RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)).value;
		pilaSemantica.push("Global"); 
             tipoDato=def.toString();
             identificador=id.toString();
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
            System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INITIAL ::= PR_CLASS IDENTIFICADOR DOS_PUNTOS VARIABLES FUNCIONES BLOQUE_CODIGO 
            {
              Object RESULT =null;
		int claseleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int claseright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		Object clase = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int localleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int localright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object local = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 tipoDato=clase.toString();
         identificador=id.toString();
         pilaSemantica.push("Global");
         Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
         buscarRepetidos(datos_simbolo);
         //tabla_simbolos.add(datos_simbolo);
         System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INITIAL",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= INITIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INITIAL ::= FUNCIONES VARIABLES NT$0 BLOQUE_CODIGO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int globalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int globalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object global = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;
		pilaSemantica.push("Global");
                                                   Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
                                                   buscarRepetidos(datos_simbolo);
                                                   //tabla_simbolos.add(datos_simbolo);
                                                   System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                                                    /*muestraTabla();*/ archivo_salida.fileWritter(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INITIAL",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int globalleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int globalright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object global = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 archivo_salida.endSegDatos(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

