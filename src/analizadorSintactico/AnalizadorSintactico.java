
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 09 18:54:45 CST 2016
//----------------------------------------------------

package analizadorSintactico;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 09 18:54:45 CST 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\004\000\002\002" +
    "\006\000\002\003\014\000\002\003\002\000\002\012\004" +
    "\000\002\012\002\000\002\013\004\000\002\013\002\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\002\000\002\006\005" +
    "\000\002\006\002\000\002\015\003\000\002\015\003\000" +
    "\002\016\004\000\002\016\002\000\002\017\005\000\002" +
    "\017\005\000\002\034\003\000\002\034\003\000\002\030" +
    "\004\000\002\031\005\000\002\032\004\000\002\033\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\006\000\002\025\006\000\002\025\004" +
    "\000\002\026\005\000\002\026\002\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\030\002\ufffd\004\004\017\005\032\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd" +
    "\001\002\000\004\067\060\001\002\000\004\067\055\001" +
    "\002\000\024\002\ufff0\032\017\037\012\040\020\041\016" +
    "\042\015\043\011\045\014\046\021\001\002\000\004\002" +
    "\010\001\002\000\004\002\000\001\002\000\004\067\052" +
    "\001\002\000\004\067\047\001\002\000\004\002\001\001" +
    "\002\000\004\067\044\001\002\000\004\067\041\001\002" +
    "\000\004\067\036\001\002\000\004\067\033\001\002\000" +
    "\004\067\030\001\002\000\004\067\022\001\002\000\050" +
    "\002\uffee\032\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\045\uffee\046\uffee\051\uffee\055\uffee\056\uffee\057\uffee" +
    "\061\uffee\062\uffee\063\023\065\uffee\067\uffee\073\uffee\001" +
    "\002\000\004\067\026\001\002\000\046\002\ufff0\032\017" +
    "\037\012\040\020\041\016\042\015\043\011\045\014\046" +
    "\021\051\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0" +
    "\065\ufff0\067\ufff0\073\ufff0\001\002\000\026\002\ufff5\051" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\061\ufff5\062\ufff5\065\ufff5" +
    "\067\ufff5\073\ufff5\001\002\000\050\002\uffee\032\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee" +
    "\051\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee\063" +
    "\023\065\uffee\067\uffee\073\uffee\001\002\000\046\002\uffef" +
    "\032\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\045" +
    "\uffef\046\uffef\051\uffef\055\uffef\056\uffef\057\uffef\061\uffef" +
    "\062\uffef\065\uffef\067\uffef\073\uffef\001\002\000\050\002" +
    "\uffee\032\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\045\uffee\046\uffee\051\uffee\055\uffee\056\uffee\057\uffee\061" +
    "\uffee\062\uffee\063\023\065\uffee\067\uffee\073\uffee\001\002" +
    "\000\046\002\ufff0\032\017\037\012\040\020\041\016\042" +
    "\015\043\011\045\014\046\021\051\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\061\ufff0\062\ufff0\065\ufff0\067\ufff0\073\ufff0\001" +
    "\002\000\026\002\ufff4\051\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\061\ufff4\062\ufff4\065\ufff4\067\ufff4\073\ufff4\001\002\000" +
    "\050\002\uffee\032\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\045\uffee\046\uffee\051\uffee\055\uffee\056\uffee\057" +
    "\uffee\061\uffee\062\uffee\063\023\065\uffee\067\uffee\073\uffee" +
    "\001\002\000\046\002\ufff0\032\017\037\012\040\020\041" +
    "\016\042\015\043\011\045\014\046\021\051\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0\067\ufff0\073" +
    "\ufff0\001\002\000\026\002\ufff8\051\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\061\ufff8\062\ufff8\065\ufff8\067\ufff8\073\ufff8\001" +
    "\002\000\050\002\uffee\032\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\045\uffee\046\uffee\051\uffee\055\uffee\056" +
    "\uffee\057\uffee\061\uffee\062\uffee\063\023\065\uffee\067\uffee" +
    "\073\uffee\001\002\000\046\002\ufff0\032\017\037\012\040" +
    "\020\041\016\042\015\043\011\045\014\046\021\051\ufff0" +
    "\055\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065\ufff0\067" +
    "\ufff0\073\ufff0\001\002\000\026\002\ufff3\051\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\061\ufff3\062\ufff3\065\ufff3\067\ufff3\073" +
    "\ufff3\001\002\000\050\002\uffee\032\uffee\037\uffee\040\uffee" +
    "\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\051\uffee\055" +
    "\uffee\056\uffee\057\uffee\061\uffee\062\uffee\063\023\065\uffee" +
    "\067\uffee\073\uffee\001\002\000\046\002\ufff0\032\017\037" +
    "\012\040\020\041\016\042\015\043\011\045\014\046\021" +
    "\051\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\062\ufff0\065" +
    "\ufff0\067\ufff0\073\ufff0\001\002\000\026\002\ufff2\051\ufff2" +
    "\055\ufff2\056\ufff2\057\ufff2\061\ufff2\062\ufff2\065\ufff2\067" +
    "\ufff2\073\ufff2\001\002\000\050\002\uffee\032\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046\uffee\051" +
    "\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee\063\023" +
    "\065\uffee\067\uffee\073\uffee\001\002\000\046\002\ufff0\032" +
    "\017\037\012\040\020\041\016\042\015\043\011\045\014" +
    "\046\021\051\ufff0\055\ufff0\056\ufff0\057\ufff0\061\ufff0\062" +
    "\ufff0\065\ufff0\067\ufff0\073\ufff0\001\002\000\026\002\ufff6" +
    "\051\ufff6\055\ufff6\056\ufff6\057\ufff6\061\ufff6\062\ufff6\065" +
    "\ufff6\067\ufff6\073\ufff6\001\002\000\050\002\uffee\032\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\045\uffee\046" +
    "\uffee\051\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee" +
    "\063\023\065\uffee\067\uffee\073\uffee\001\002\000\046\002" +
    "\ufff0\032\017\037\012\040\020\041\016\042\015\043\011" +
    "\045\014\046\021\051\ufff0\055\ufff0\056\ufff0\057\ufff0\061" +
    "\ufff0\062\ufff0\065\ufff0\067\ufff0\073\ufff0\001\002\000\026" +
    "\002\ufff7\051\ufff7\055\ufff7\056\ufff7\057\ufff7\061\ufff7\062" +
    "\ufff7\065\ufff7\067\ufff7\073\ufff7\001\002\000\050\002\uffee" +
    "\032\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\045" +
    "\uffee\046\uffee\051\uffee\055\uffee\056\uffee\057\uffee\061\uffee" +
    "\062\uffee\063\023\065\uffee\067\uffee\073\uffee\001\002\000" +
    "\046\002\ufff0\032\017\037\012\040\020\041\016\042\015" +
    "\043\011\045\014\046\021\051\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\065\ufff0\067\ufff0\073\ufff0\001\002" +
    "\000\026\002\ufff1\051\ufff1\055\ufff1\056\ufff1\057\ufff1\061" +
    "\ufff1\062\ufff1\065\ufff1\067\ufff1\073\ufff1\001\002\000\004" +
    "\064\056\001\002\000\024\002\ufff0\032\017\037\012\040" +
    "\020\041\016\042\015\043\011\045\014\046\021\001\002" +
    "\000\004\002\uffff\001\002\000\004\053\061\001\002\000" +
    "\006\054\ufffb\067\062\001\002\000\006\054\ufff9\063\176" +
    "\001\002\000\004\054\064\001\002\000\004\064\065\001" +
    "\002\000\044\032\017\037\012\040\020\041\016\042\015" +
    "\043\011\045\014\046\021\051\ufff0\055\ufff0\056\ufff0\057" +
    "\ufff0\061\ufff0\062\ufff0\065\ufff0\067\ufff0\073\ufff0\001\002" +
    "\000\024\051\072\055\074\056\067\057\101\061\100\062" +
    "\070\065\uffea\067\106\073\075\001\002\000\054\052\uffd8" +
    "\063\uffd8\065\uffd8\067\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\105\uffd8\124\uffd8\125\uffd8\126\uffd8" +
    "\127\uffd8\130\uffd8\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135" +
    "\uffd8\001\002\000\054\052\uffde\063\uffde\065\uffde\067\uffde" +
    "\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\105" +
    "\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde" +
    "\132\uffde\133\uffde\134\uffde\135\uffde\001\002\000\006\065" +
    "\uffe7\067\uffe7\001\002\000\024\051\072\052\167\055\074" +
    "\056\067\057\101\061\100\062\070\067\125\073\075\001" +
    "\002\000\044\077\152\100\154\101\142\102\147\103\131" +
    "\104\141\105\151\124\150\125\134\126\144\127\155\130" +
    "\130\131\153\132\146\133\132\134\135\135\140\001\002" +
    "\000\054\052\uffda\063\uffda\065\uffda\067\uffda\077\uffda\100" +
    "\uffda\101\uffda\102\uffda\103\uffda\104\uffda\105\uffda\124\uffda" +
    "\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda\132\uffda\133" +
    "\uffda\134\uffda\135\uffda\001\002\000\054\052\uffdd\063\uffdd" +
    "\065\uffdd\067\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103" +
    "\uffdd\104\uffdd\105\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd" +
    "\130\uffdd\131\uffdd\132\uffdd\133\uffdd\134\uffdd\135\uffdd\001" +
    "\002\000\004\065\165\001\002\000\054\052\uffe0\063\uffe0" +
    "\065\uffe0\067\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103" +
    "\uffe0\104\uffe0\105\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0" +
    "\130\uffe0\131\uffe0\132\uffe0\133\uffe0\134\uffe0\135\uffe0\001" +
    "\002\000\054\052\uffdf\063\uffdf\065\uffdf\067\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\124" +
    "\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\133\uffdf\134\uffdf\135\uffdf\001\002\000\054\052\uffd9\063" +
    "\uffd9\065\uffd9\067\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\103\uffd9\104\uffd9\105\uffd9\124\uffd9\125\uffd9\126\uffd9\127" +
    "\uffd9\130\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\135\uffd9" +
    "\001\002\000\054\052\uffdb\063\uffdb\065\uffdb\067\uffdb\077" +
    "\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\104\uffdb\105\uffdb" +
    "\124\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132" +
    "\uffdb\133\uffdb\134\uffdb\135\uffdb\001\002\000\004\065\uffed" +
    "\001\002\000\006\065\uffe6\067\uffe6\001\002\000\004\065" +
    "\uffec\001\002\000\066\053\114\077\uffe1\100\uffe1\101\uffe1" +
    "\102\uffe1\103\uffe1\104\uffe1\105\uffe1\114\111\115\112\116" +
    "\121\117\116\120\113\121\110\122\122\123\115\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133" +
    "\uffe1\134\uffe1\135\uffe1\001\002\000\054\052\uffdc\063\uffdc" +
    "\065\uffdc\067\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103" +
    "\uffdc\104\uffdc\105\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc" +
    "\130\uffdc\131\uffdc\132\uffdc\133\uffdc\134\uffdc\135\uffdc\001" +
    "\002\000\022\051\uffc6\055\uffc6\056\uffc6\057\uffc6\061\uffc6" +
    "\062\uffc6\067\uffc6\073\uffc6\001\002\000\022\051\uffcb\055" +
    "\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\067\uffcb\073\uffcb" +
    "\001\002\000\022\051\uffca\055\uffca\056\uffca\057\uffca\061" +
    "\uffca\062\uffca\067\uffca\073\uffca\001\002\000\022\051\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\061\uffc7\062\uffc7\067\uffc7\073" +
    "\uffc7\001\002\000\006\054\ufffb\067\062\001\002\000\022" +
    "\051\uffc4\055\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\067" +
    "\uffc4\073\uffc4\001\002\000\022\051\uffc8\055\uffc8\056\uffc8" +
    "\057\uffc8\061\uffc8\062\uffc8\067\uffc8\073\uffc8\001\002\000" +
    "\022\051\072\055\074\056\067\057\101\061\100\062\070" +
    "\067\125\073\075\001\002\000\004\065\uffeb\001\002\000" +
    "\022\051\uffc9\055\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9" +
    "\067\uffc9\073\uffc9\001\002\000\022\051\uffc5\055\uffc5\056" +
    "\uffc5\057\uffc5\061\uffc5\062\uffc5\067\uffc5\073\uffc5\001\002" +
    "\000\050\065\uffea\067\127\077\152\100\154\101\142\102" +
    "\147\103\131\104\141\105\151\124\150\125\134\126\144" +
    "\127\155\130\130\131\153\132\146\133\132\134\135\135" +
    "\140\001\002\000\006\065\uffea\067\127\001\002\000\056" +
    "\052\uffe1\053\114\063\uffe1\065\uffe1\067\uffe1\077\uffe1\100" +
    "\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1\105\uffe1\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\133" +
    "\uffe1\134\uffe1\135\uffe1\001\002\000\004\065\uffe8\001\002" +
    "\000\022\114\111\115\112\116\121\117\116\120\113\121" +
    "\110\122\122\123\115\001\002\000\022\051\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\061\uffbf\062\uffbf\067\uffbf\073\uffbf\001" +
    "\002\000\022\051\uffce\055\uffce\056\uffce\057\uffce\061\uffce" +
    "\062\uffce\067\uffce\073\uffce\001\002\000\022\051\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\067\uffbc\073\uffbc" +
    "\001\002\000\006\065\uffe5\067\uffe5\001\002\000\022\051" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2\067\uffc2" +
    "\073\uffc2\001\002\000\022\051\uffba\055\uffba\056\uffba\057" +
    "\uffba\061\uffba\062\uffba\067\uffba\073\uffba\001\002\000\022" +
    "\051\072\055\074\056\067\057\101\061\100\062\070\067" +
    "\125\073\075\001\002\000\022\051\072\055\074\056\067" +
    "\057\101\061\100\062\070\067\125\073\075\001\002\000" +
    "\022\051\uffbb\055\uffbb\056\uffbb\057\uffbb\061\uffbb\062\uffbb" +
    "\067\uffbb\073\uffbb\001\002\000\022\051\uffcd\055\uffcd\056" +
    "\uffcd\057\uffcd\061\uffcd\062\uffcd\067\uffcd\073\uffcd\001\002" +
    "\000\022\051\uffd2\055\uffd2\056\uffd2\057\uffd2\061\uffd2\062" +
    "\uffd2\067\uffd2\073\uffd2\001\002\000\006\065\uffe3\067\uffe3" +
    "\001\002\000\022\051\uffc1\055\uffc1\056\uffc1\057\uffc1\061" +
    "\uffc1\062\uffc1\067\uffc1\073\uffc1\001\002\000\004\065\uffe9" +
    "\001\002\000\022\051\uffbd\055\uffbd\056\uffbd\057\uffbd\061" +
    "\uffbd\062\uffbd\067\uffbd\073\uffbd\001\002\000\022\051\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\061\uffcf\062\uffcf\067\uffcf\073" +
    "\uffcf\001\002\000\022\051\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\061\uffc3\062\uffc3\067\uffc3\073\uffc3\001\002\000\022\051" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\061\uffcc\062\uffcc\067\uffcc" +
    "\073\uffcc\001\002\000\022\051\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\061\uffd1\062\uffd1\067\uffd1\073\uffd1\001\002\000\022" +
    "\051\uffbe\055\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe\067" +
    "\uffbe\073\uffbe\001\002\000\022\051\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\061\uffd0\062\uffd0\067\uffd0\073\uffd0\001\002\000" +
    "\022\051\uffc0\055\uffc0\056\uffc0\057\uffc0\061\uffc0\062\uffc0" +
    "\067\uffc0\073\uffc0\001\002\000\026\124\150\125\134\126" +
    "\144\127\155\130\130\131\153\132\146\133\132\134\135" +
    "\135\140\001\002\000\006\065\uffe2\067\uffe2\001\002\000" +
    "\020\077\152\100\154\101\142\102\147\103\131\104\141" +
    "\105\151\001\002\000\006\065\uffe4\067\uffe4\001\002\000" +
    "\004\054\163\001\002\000\054\052\uffd7\063\uffd7\065\uffd7" +
    "\067\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104" +
    "\uffd7\105\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7" +
    "\131\uffd7\132\uffd7\133\uffd7\134\uffd7\135\uffd7\001\002\000" +
    "\026\002\ufffd\004\004\032\ufffd\037\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\045\ufffd\046\ufffd\001\002\000\026\002" +
    "\uffb9\004\uffb9\032\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9" +
    "\043\uffb9\045\uffb9\046\uffb9\001\002\000\024\002\ufffe\032" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe" +
    "\046\ufffe\001\002\000\054\052\uffd5\063\uffd5\065\uffd5\067" +
    "\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5" +
    "\105\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131" +
    "\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\001\002\000\006" +
    "\052\uffd3\063\171\001\002\000\022\051\072\055\074\056" +
    "\067\057\101\061\100\062\070\067\125\073\075\001\002" +
    "\000\004\052\173\001\002\000\054\052\uffd6\063\uffd6\065" +
    "\uffd6\067\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6" +
    "\104\uffd6\105\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130" +
    "\uffd6\131\uffd6\132\uffd6\133\uffd6\134\uffd6\135\uffd6\001\002" +
    "\000\006\052\uffd3\063\171\001\002\000\004\052\uffd4\001" +
    "\002\000\006\054\ufffb\067\062\001\002\000\004\054\ufffc" +
    "\001\002\000\004\054\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\023\001\001\000\002\001\001" +
    "\000\004\005\024\001\001\000\002\001\001\000\004\006" +
    "\026\001\001\000\002\001\001\000\004\006\030\001\001" +
    "\000\004\005\031\001\001\000\002\001\001\000\004\006" +
    "\033\001\001\000\004\005\034\001\001\000\002\001\001" +
    "\000\004\006\036\001\001\000\004\005\037\001\001\000" +
    "\002\001\001\000\004\006\041\001\001\000\004\005\042" +
    "\001\001\000\002\001\001\000\004\006\044\001\001\000" +
    "\004\005\045\001\001\000\002\001\001\000\004\006\047" +
    "\001\001\000\004\005\050\001\001\000\002\001\001\000" +
    "\004\006\052\001\001\000\004\005\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\062\001\001" +
    "\000\004\013\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\065\001\001\000\024\015\075\016\102" +
    "\022\072\023\076\024\101\025\106\030\070\032\103\034" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\167\023\076\024\101\025\106\001" +
    "\001\000\012\020\135\027\136\031\132\033\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\117\021\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\022\122\023\076\024" +
    "\101\025\106\030\070\032\103\034\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\144\020\135\027\136\031\132\033\142\001\001\000\004" +
    "\016\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\117\021\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\157\023\076\024\101" +
    "\025\106\001\001\000\012\022\155\023\076\024\101\025" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\136\033\156" +
    "\001\001\000\002\001\001\000\006\020\135\031\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\171\001\001\000\012" +
    "\022\173\023\076\024\101\025\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\174\001\001\000\002" +
    "\001\001\000\004\012\177\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args){
        try {
            Symbol asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0]))).parse();
            //Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
  

    public void syntax_error(Symbol s){
	report_error("Error de sintaxis. Linea: " + (s.right + 1) +
	" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);

    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TERMINADOR ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TERMINADOR",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_COMPARAR ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_COMPARAR ::= OP_OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_COMPARAR ::= OP_AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_COMPARAR ::= OP_MENORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_COMPARAR ::= OP_MAYORIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_COMPARAR ::= OP_DIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_COMPARAR ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_COMPARAR ::= OP_MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OP_COMPARAR ::= OP_DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OP_COMPARAR ::= OP_CMPIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_COMPARAR",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OP_ASG ::= OP_ASG_DIVENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_ASG ::= OP_ASG_POT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_ASG ::= OP_ASG_MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_ASG ::= OP_ASG_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_ASG ::= OP_ASG_MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_ASG ::= OP_ASG_RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_ASG ::= OP_ASG_SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_ASG ::= OP_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ASG",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_ARIT ::= OP_DIVENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_ARIT ::= OP_POT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_ARIT ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_ARIT ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_ARIT ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_ARIT ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_ARIT ::= OP_SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("OP_ARIT",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MAS_TIPO_LISTA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_LISTA ::= CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_FUNC",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_NUMERO ::= NUMERO_LONG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_NUMERO ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_NUMERO ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_DATO ::= TIPO_FUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DATO ::= TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DATO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_DATO ::= BOOL_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DATO ::= BOOL_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_DATO ::= TIPO_NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_DATO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAS_COMPARATIVA ::= OP_COMPARAR TIPO_DATO MAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_COMPARATIVA",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // COMPARATIVA ::= TIPO_DATO MAS_COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("COMPARATIVA",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MAS_ARITMETICA ::= OP_ARIT TIPO_DATO MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ARITMETICA",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARITMETICA ::= TIPO_DATO MAS_ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESSION ::= COMPARATIVA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESSION ::= ARITMETICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("EXPRESSION",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAS_ASIGNACION ::= OP_ASG EXPRESSION ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAS_ASIGNACION ::= OP_ASG TIPO_DATO ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= IDENTIFICADOR MAS_ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE_FUNCION ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE_FUNCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MAS_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAS_VARIABLES ::= COMA IDENTIFICADOR MAS_VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= PR_CHAR IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= PR_BOOLEAN IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLES ::= PR_STRING IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= PR_LIST IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= PR_COMPLEX IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= PR_LONG IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES ::= PR_FLOAT IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLES ::= PR_INT IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAS_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAS_PARAMETROS ::= COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARAMETROS ::= IDENTIFICADOR MAS_PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= PR_DEF IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_FUNCION TERMINADOR FUNCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PR_CLASS IDENTIFICADOR DOS_PUNTOS VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // START ::= FUNCIONES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

