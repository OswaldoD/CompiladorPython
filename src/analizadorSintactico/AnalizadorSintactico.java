
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 08 13:20:32 CST 2016
//----------------------------------------------------

package analizadorSintactico;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 08 13:20:32 CST 2016
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\004\000\002\002" +
    "\006\000\002\003\014\000\002\003\002\000\002\011\004" +
    "\000\002\012\004\000\002\012\002\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\002\000\002\005\005\000\002\005\002" +
    "\000\002\014\003\000\002\015\006\000\002\015\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\006\000\002\021\006\000\002\021\004\000" +
    "\002\022\005\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\030\002\ufffd\004\004\017\005\032\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd" +
    "\001\002\000\004\067\060\001\002\000\004\067\055\001" +
    "\002\000\024\002\ufff1\032\017\037\012\040\020\041\016" +
    "\042\015\043\011\045\014\046\021\001\002\000\004\002" +
    "\010\001\002\000\004\002\000\001\002\000\004\067\052" +
    "\001\002\000\004\067\047\001\002\000\004\002\001\001" +
    "\002\000\004\067\044\001\002\000\004\067\041\001\002" +
    "\000\004\067\036\001\002\000\004\067\033\001\002\000" +
    "\004\067\030\001\002\000\004\067\022\001\002\000\032" +
    "\002\uffef\032\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\045\uffef\046\uffef\063\023\065\uffef\067\uffef\001\002" +
    "\000\004\067\026\001\002\000\030\002\ufff1\032\017\037" +
    "\012\040\020\041\016\042\015\043\011\045\014\046\021" +
    "\065\ufff1\067\ufff1\001\002\000\010\002\ufff6\065\ufff6\067" +
    "\ufff6\001\002\000\032\002\uffef\032\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\063\023\065" +
    "\uffef\067\uffef\001\002\000\030\002\ufff0\032\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\065" +
    "\ufff0\067\ufff0\001\002\000\032\002\uffef\032\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\063" +
    "\023\065\uffef\067\uffef\001\002\000\030\002\ufff1\032\017" +
    "\037\012\040\020\041\016\042\015\043\011\045\014\046" +
    "\021\065\ufff1\067\ufff1\001\002\000\010\002\ufff5\065\ufff5" +
    "\067\ufff5\001\002\000\032\002\uffef\032\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\063\023" +
    "\065\uffef\067\uffef\001\002\000\030\002\ufff1\032\017\037" +
    "\012\040\020\041\016\042\015\043\011\045\014\046\021" +
    "\065\ufff1\067\ufff1\001\002\000\010\002\ufff9\065\ufff9\067" +
    "\ufff9\001\002\000\032\002\uffef\032\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\063\023\065" +
    "\uffef\067\uffef\001\002\000\030\002\ufff1\032\017\037\012" +
    "\040\020\041\016\042\015\043\011\045\014\046\021\065" +
    "\ufff1\067\ufff1\001\002\000\010\002\ufff4\065\ufff4\067\ufff4" +
    "\001\002\000\032\002\uffef\032\uffef\037\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\045\uffef\046\uffef\063\023\065\uffef" +
    "\067\uffef\001\002\000\030\002\ufff1\032\017\037\012\040" +
    "\020\041\016\042\015\043\011\045\014\046\021\065\ufff1" +
    "\067\ufff1\001\002\000\010\002\ufff3\065\ufff3\067\ufff3\001" +
    "\002\000\032\002\uffef\032\uffef\037\uffef\040\uffef\041\uffef" +
    "\042\uffef\043\uffef\045\uffef\046\uffef\063\023\065\uffef\067" +
    "\uffef\001\002\000\030\002\ufff1\032\017\037\012\040\020" +
    "\041\016\042\015\043\011\045\014\046\021\065\ufff1\067" +
    "\ufff1\001\002\000\010\002\ufff7\065\ufff7\067\ufff7\001\002" +
    "\000\032\002\uffef\032\uffef\037\uffef\040\uffef\041\uffef\042" +
    "\uffef\043\uffef\045\uffef\046\uffef\063\023\065\uffef\067\uffef" +
    "\001\002\000\030\002\ufff1\032\017\037\012\040\020\041" +
    "\016\042\015\043\011\045\014\046\021\065\ufff1\067\ufff1" +
    "\001\002\000\010\002\ufff8\065\ufff8\067\ufff8\001\002\000" +
    "\032\002\uffef\032\uffef\037\uffef\040\uffef\041\uffef\042\uffef" +
    "\043\uffef\045\uffef\046\uffef\063\023\065\uffef\067\uffef\001" +
    "\002\000\030\002\ufff1\032\017\037\012\040\020\041\016" +
    "\042\015\043\011\045\014\046\021\065\ufff1\067\ufff1\001" +
    "\002\000\010\002\ufff2\065\ufff2\067\ufff2\001\002\000\004" +
    "\064\056\001\002\000\024\002\ufff1\032\017\037\012\040" +
    "\020\041\016\042\015\043\011\045\014\046\021\001\002" +
    "\000\004\002\uffff\001\002\000\004\053\061\001\002\000" +
    "\004\067\062\001\002\000\006\054\ufffa\063\124\001\002" +
    "\000\004\054\064\001\002\000\004\064\065\001\002\000" +
    "\026\032\017\037\012\040\020\041\016\042\015\043\011" +
    "\045\014\046\021\065\ufff1\067\ufff1\001\002\000\006\065" +
    "\uffec\067\070\001\002\000\004\065\uffee\001\002\000\004" +
    "\104\074\001\002\000\004\065\072\001\002\000\026\002" +
    "\ufffd\004\004\032\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\045\ufffd\046\ufffd\001\002\000\024\002\ufffe\032" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe" +
    "\046\ufffe\001\002\000\022\051\077\055\101\056\075\057" +
    "\105\061\104\062\076\067\107\073\102\001\002\000\012" +
    "\052\uffe2\063\uffe2\065\uffe2\067\uffe2\001\002\000\012\052" +
    "\uffe8\063\uffe8\065\uffe8\067\uffe8\001\002\000\024\051\077" +
    "\052\115\055\101\056\075\057\105\061\104\062\076\067" +
    "\107\073\102\001\002\000\006\065\uffec\067\070\001\002" +
    "\000\012\052\uffe4\063\uffe4\065\uffe4\067\uffe4\001\002\000" +
    "\012\052\uffe7\063\uffe7\065\uffe7\067\uffe7\001\002\000\012" +
    "\052\uffea\063\uffea\065\uffea\067\uffea\001\002\000\012\052" +
    "\uffe9\063\uffe9\065\uffe9\067\uffe9\001\002\000\012\052\uffe3" +
    "\063\uffe3\065\uffe3\067\uffe3\001\002\000\012\052\uffe5\063" +
    "\uffe5\065\uffe5\067\uffe5\001\002\000\014\052\uffeb\053\111" +
    "\063\uffeb\065\uffeb\067\uffeb\001\002\000\012\052\uffe6\063" +
    "\uffe6\065\uffe6\067\uffe6\001\002\000\004\067\062\001\002" +
    "\000\004\054\113\001\002\000\012\052\uffe1\063\uffe1\065" +
    "\uffe1\067\uffe1\001\002\000\004\065\uffed\001\002\000\012" +
    "\052\uffdf\063\uffdf\065\uffdf\067\uffdf\001\002\000\006\052" +
    "\uffdd\063\117\001\002\000\022\051\077\055\101\056\075" +
    "\057\105\061\104\062\076\067\107\073\102\001\002\000" +
    "\004\052\121\001\002\000\012\052\uffe0\063\uffe0\065\uffe0" +
    "\067\uffe0\001\002\000\006\052\uffdd\063\117\001\002\000" +
    "\004\052\uffde\001\002\000\004\067\062\001\002\000\004" +
    "\054\ufffc\001\002\000\004\054\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\023\001\001\000\002\001\001" +
    "\000\004\004\024\001\001\000\002\001\001\000\004\005" +
    "\026\001\001\000\002\001\001\000\004\005\030\001\001" +
    "\000\004\004\031\001\001\000\002\001\001\000\004\005" +
    "\033\001\001\000\004\004\034\001\001\000\002\001\001" +
    "\000\004\005\036\001\001\000\004\004\037\001\001\000" +
    "\002\001\001\000\004\005\041\001\001\000\004\004\042" +
    "\001\001\000\002\001\001\000\004\005\044\001\001\000" +
    "\004\004\045\001\001\000\002\001\001\000\004\005\047" +
    "\001\001\000\004\004\050\001\001\000\002\001\001\000" +
    "\004\005\052\001\001\000\004\004\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\062\001\001" +
    "\000\004\012\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\065\001\001\000\006\014\070\015\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\072\001\001\000\002\001\001\000\012" +
    "\016\077\017\102\020\105\021\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\115\017\102\020\105" +
    "\021\107\001\001\000\004\015\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\117\001\001\000\012\016\121\017\102\020\105" +
    "\021\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\122\001\001\000\002\001\001\000\004\011\125" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args){
        try {
            Symbol asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0]))).parse();
            //Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
  

    public void syntax_error(Symbol s){
	report_error("Error de sintaxis. Linea: " + (s.right + 1) +
	" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }  

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {
  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MAS_TIPO_LISTA ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_TIPO_LISTA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_LISTA ::= CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_LISTA",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_FUNC",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_NUMERO ::= NUMERO_LONG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_NUMERO ::= NUMERO_FLOTANTE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_NUMERO ::= NUMERO_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERO",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_DATO ::= TIPO_FUNC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_DATO ::= TIPO_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_DATO ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_DATO ::= BOOL_FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= BOOL_TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= TIPO_NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= IDENTIFICADOR OP_IGUAL TIPO_DATO ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BLOQUE_FUNCION ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_FUNCION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MAS_VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MAS_VARIABLES ::= COMA IDENTIFICADOR MAS_VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLES ::= PR_CHAR IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLES ::= PR_BOOLEAN IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLES ::= PR_STRING IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VARIABLES ::= PR_LIST IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VARIABLES ::= PR_COMPLEX IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VARIABLES ::= PR_LONG IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VARIABLES ::= PR_FLOAT IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VARIABLES ::= PR_INT IDENTIFICADOR MAS_VARIABLES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAS_PARAMETROS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAS_PARAMETROS ::= COMA PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAS_PARAMETROS",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARAMETROS ::= IDENTIFICADOR MAS_PARAMETROS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCIONES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCIONES ::= PR_DEF IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_FUNCION PUNTO_COMA FUNCIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("FUNCIONES",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-9)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // START ::= PR_CLASS IDENTIFICADOR DOS_PUNTOS VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // START ::= FUNCIONES VARIABLES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

