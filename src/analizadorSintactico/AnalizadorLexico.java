/* The following code was generated by JFlex 1.6.1 */

package analizadorSintactico;

/* --------------------------Codigo de Usuario----------------------- */

import java_cup.runtime.*;
import java.io.Reader;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.flex</tt>
 */
class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\67\1\1\1\1\22\0\1\1\1\50\3\0"+
    "\1\46\1\53\1\17\1\65\1\66\1\6\1\12\1\57\1\3\1\10"+
    "\1\45\12\16\1\60\1\0\1\52\1\47\1\51\2\0\4\7\1\11"+
    "\1\7\3\7\1\14\1\7\1\5\7\7\1\7\6\7\1\63\1\7"+
    "\1\64\1\55\1\7\1\7\1\20\1\25\1\27\1\35\1\22\1\36"+
    "\1\42\1\44\1\33\1\13\1\26\1\30\1\41\1\32\1\31\1\37"+
    "\1\15\1\23\1\21\1\24\1\34\1\15\1\43\1\4\1\40\1\15"+
    "\1\61\1\54\1\62\1\56\6\0\1\67\u05da\0\12\2\206\0\12\2"+
    "\306\0\12\2\u019c\0\12\2\166\0\12\2\166\0\12\2\166\0\12\2"+
    "\166\0\12\2\166\0\12\2\166\0\12\2\166\0\12\2\166\0\12\2"+
    "\166\0\12\2\140\0\12\2\166\0\12\2\106\0\12\2\u0116\0\12\2"+
    "\106\0\12\2\u0746\0\12\2\46\0\12\2\u012c\0\12\2\200\0\12\2"+
    "\246\0\12\2\6\0\12\2\266\0\12\2\126\0\12\2\206\0\12\2"+
    "\6\0\12\2\u03ce\0\1\67\1\67\u85f6\0\12\2\u02a6\0\12\2\46\0"+
    "\12\2\306\0\12\2\26\0\12\2\126\0\12\2\u0196\0\12\2\u5316\0"+
    "\12\2\u0586\0\12\2\u0bbc\0\12\2\200\0\12\2\74\0\12\2\220\0"+
    "\12\2\u0116\0\12\2\u01d6\0\12\2\u0176\0\12\2\146\0\12\2\u0216\0"+
    "\12\2\u5176\0\12\2\346\0\12\2\u6c74\0\62\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\20\5\1\10\1\11\1\12\1\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\31\1\33\2\31\1\3\1\0\1\34\1\35\1\36"+
    "\1\0\1\37\1\0\1\40\13\5\1\41\1\5\1\42"+
    "\1\43\1\44\13\5\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\3\1\0\1\33"+
    "\1\57\2\0\1\32\1\33\1\60\2\0\1\40\1\0"+
    "\1\5\1\61\6\5\1\62\4\5\1\63\1\64\2\5"+
    "\1\65\1\66\1\5\1\67\7\5\1\70\1\0\1\33"+
    "\1\0\1\3\1\33\1\0\1\5\1\71\1\5\1\72"+
    "\1\73\10\5\1\74\1\5\1\75\3\5\1\76\1\5"+
    "\2\33\1\0\1\33\1\0\2\5\1\77\1\5\1\100"+
    "\1\101\2\5\1\102\2\5\1\103\1\104\1\5\1\105"+
    "\1\106\1\107\1\110\1\111\1\5\1\112\1\113\1\5"+
    "\1\114\1\5\1\115\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\70\0\70\0\340\0\70\0\70\0\70\0\70\0\70"+
    "\0\340\0\340\0\70\0\70\0\u06c8\0\u0700\0\u0738\0\u0700"+
    "\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0150\0\70\0\u0850\0\70"+
    "\0\u0888\0\70\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\340"+
    "\0\u0b98\0\340\0\u0bd0\0\340\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\70\0\u0f88\0\u0fc0"+
    "\0\70\0\u0ff8\0\70\0\u1030\0\u1068\0\70\0\u10a0\0\u10d8"+
    "\0\340\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\340"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\340\0\340\0\u1340\0\u1378"+
    "\0\340\0\340\0\u13b0\0\340\0\u13e8\0\u1420\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\70\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\340\0\u16f8\0\340\0\340\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\340"+
    "\0\u18f0\0\340\0\u1928\0\u1960\0\u1998\0\340\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\340\0\u1b90"+
    "\0\340\0\340\0\u1bc8\0\u1c00\0\340\0\u1c38\0\u1c70\0\340"+
    "\0\340\0\u1ca8\0\340\0\70\0\340\0\340\0\340\0\u1ce0"+
    "\0\340\0\340\0\u1d18\0\340\0\u1d50\0\340\0\340";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\6\1\10"+
    "\1\6\1\11\3\6\1\4\1\12\1\13\1\6\1\14"+
    "\1\15\1\16\1\17\1\6\1\20\1\21\1\22\1\23"+
    "\1\24\1\6\1\25\1\26\1\27\1\30\1\6\1\31"+
    "\1\32\1\6\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\73\0\1\4\1\0\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\0\1\63\1\60"+
    "\1\63\1\4\1\0\1\60\1\63\1\62\2\63\1\60"+
    "\1\63\1\60\5\63\2\60\6\63\10\0\1\60\5\0"+
    "\2\60\5\0\1\64\5\0\1\65\5\0\1\64\30\0"+
    "\1\66\24\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\25\6\10\0\1\6\5\0\2\6\11\0"+
    "\1\67\40\0\1\70\22\0\1\71\13\0\1\71\120\0"+
    "\1\72\20\0\17\73\1\74\50\73\4\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\1\75"+
    "\10\6\1\76\12\6\10\0\1\6\5\0\2\6\7\0"+
    "\1\77\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\10\6\1\100\14\6\10\0\1\6\5\0\2\6"+
    "\7\0\2\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\101\1\6\1\102\22\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\103\21\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\104\21\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\10\6\1\105\1\106\13\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\107\24\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\3\6\1\110\21\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\11\6\1\111\13\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\1\6\1\112\10\6\1\113\3\6\1\114"+
    "\2\6\1\115\3\6\10\0\1\6\5\0\2\6\7\0"+
    "\2\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\2\6\1\116\22\6\10\0\1\6\5\0\2\6\7\0"+
    "\2\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\3\6\1\117\5\6\1\120\1\6\1\121\11\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\122\2\6\1\123\21\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\1\124\11\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\10\6\1\125\14\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\1\126\10\6"+
    "\1\127\10\0\1\6\5\0\2\6\50\0\1\130\1\0"+
    "\1\131\67\0\1\132\67\0\1\133\67\0\1\134\67\0"+
    "\1\135\1\0\1\136\65\0\1\137\1\0\1\140\1\141"+
    "\17\0\1\142\1\0\1\63\1\56\1\0\1\60\1\0"+
    "\1\60\1\0\1\63\1\60\1\63\1\143\1\0\1\60"+
    "\1\63\1\60\2\63\1\60\1\63\1\60\5\63\2\60"+
    "\6\63\10\0\1\60\5\0\2\60\7\0\1\63\1\56"+
    "\1\0\1\60\1\0\1\60\1\0\1\63\1\60\2\63"+
    "\1\0\1\60\1\63\1\60\2\63\1\60\1\63\1\60"+
    "\5\63\2\60\6\63\10\0\1\60\5\0\2\60\5\0"+
    "\1\144\13\0\1\144\53\0\1\145\10\0\2\146\1\0"+
    "\1\145\54\0\1\147\1\63\1\56\1\0\1\60\1\0"+
    "\1\60\1\147\1\63\1\60\2\63\1\0\1\60\1\63"+
    "\1\60\2\63\1\60\1\63\1\60\5\63\2\60\6\63"+
    "\10\0\1\60\5\0\2\60\7\0\2\63\1\0\1\63"+
    "\1\0\1\63\1\0\4\63\1\0\25\63\10\0\1\63"+
    "\5\0\2\63\5\0\1\64\1\0\1\150\1\151\2\0"+
    "\1\152\5\0\1\64\120\0\1\153\22\0\1\71\1\154"+
    "\5\0\1\155\1\154\2\146\1\0\1\71\3\0\1\155"+
    "\45\0\17\73\1\156\50\73\17\0\1\157\54\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\1\160\23\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\15\6"+
    "\1\161\7\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\2\6"+
    "\1\162\4\6\1\163\15\6\10\0\1\6\5\0\2\6"+
    "\7\0\2\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\1\6\1\164\11\6\1\165\11\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\1\166\11\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\4\6\1\167\20\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\20\6\1\170\4\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\2\6\1\171\22\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\172\24\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\12\6\1\173\12\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\21\6\1\174\3\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\4\6\1\175\20\6\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\4\6\1\176\12\6\1\177\5\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\17\6\1\200\5\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\10\6\1\201\5\6\1\202"+
    "\6\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\11\6\1\203"+
    "\13\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\204"+
    "\21\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\12\6\1\205"+
    "\12\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\1\6\1\206"+
    "\23\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\1\207"+
    "\11\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\2\6\1\210"+
    "\22\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\11\6\1\211"+
    "\13\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\4\6\1\212"+
    "\20\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\13\6\1\213"+
    "\11\6\10\0\1\6\5\0\2\6\52\0\1\214\22\0"+
    "\1\142\13\0\1\142\53\0\1\142\1\0\2\63\1\0"+
    "\1\63\1\0\1\63\1\0\3\63\1\143\1\0\25\63"+
    "\10\0\1\63\5\0\2\63\5\0\1\144\2\0\1\151"+
    "\10\0\1\144\53\0\1\145\1\215\5\0\1\216\1\215"+
    "\2\146\1\0\1\145\3\0\1\216\47\0\1\217\13\0"+
    "\1\217\53\0\1\220\13\0\1\220\53\0\1\221\10\0"+
    "\2\146\1\0\1\221\53\0\1\217\6\0\1\147\4\0"+
    "\1\217\3\0\1\147\50\0\1\147\6\0\1\147\2\146"+
    "\53\0\17\157\1\222\50\157\4\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\2\6\1\223\22\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\7\6\1\224\15\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\2\6\1\225\22\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\2\6\1\226\22\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\16\6\1\227\6\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\6\1\230\23\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\14\6\1\231\10\6"+
    "\10\0\1\6\5\0\2\6\7\0\2\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\1\232\24\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\6\1\233\23\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\4\6\1\234\20\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\5\6\1\235\17\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\14\6\1\236\10\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\11\6\1\237\13\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\21\6\1\240\3\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\241\24\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\1\6\1\242\23\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\12\6\1\243\12\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\10\6\1\244\14\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\5\6\1\245\17\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\24\6\1\246\10\0\1\6\5\0"+
    "\2\6\7\0\2\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\10\6\1\247\14\6\10\0\1\6\5\0"+
    "\2\6\14\0\1\250\10\0\1\250\47\0\1\251\1\147"+
    "\6\0\1\147\2\146\1\0\1\251\53\0\1\217\10\0"+
    "\2\146\1\0\1\217\53\0\1\220\2\0\1\151\10\0"+
    "\1\220\53\0\1\221\1\252\5\0\1\253\1\252\2\146"+
    "\1\0\1\221\3\0\1\253\64\0\1\254\54\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\255\21\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\17\6"+
    "\1\256\5\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\2\6"+
    "\1\257\22\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\260\21\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\6\6"+
    "\1\261\16\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\6"+
    "\1\262\23\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\1\263\11\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\15\6"+
    "\1\264\7\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\4\6"+
    "\1\265\20\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\266\21\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\10\6"+
    "\1\267\14\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\4\6"+
    "\1\270\20\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\15\6"+
    "\1\271\7\6\10\0\1\6\5\0\2\6\7\0\2\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\1\272"+
    "\24\6\10\0\1\6\5\0\2\6\7\0\2\6\1\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\0\2\6\1\273"+
    "\22\6\10\0\1\6\5\0\2\6\5\0\1\250\13\0"+
    "\1\250\53\0\1\251\10\0\2\146\1\0\1\251\62\0"+
    "\1\251\10\0\1\251\47\0\1\250\10\0\2\146\1\0"+
    "\1\250\70\0\1\274\54\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\4\6\1\275\20\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\4\6\1\276\20\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\12\6\1\277\12\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\12\6\1\300\12\6\10\0"+
    "\1\6\5\0\2\6\7\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\1\301\24\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\4\6\1\302\20\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\10\6\1\303\14\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\10\6\1\304\14\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\14\6\1\305\10\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\20\6\1\306\4\6\10\0\1\6"+
    "\5\0\2\6\7\0\2\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\2\6\1\307\22\6\10\0\1\6"+
    "\5\0\2\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\35\1\2\11\1\1\5\11\2\1\2\11"+
    "\2\1\1\0\5\1\1\0\1\11\1\1\1\11\1\0"+
    "\1\11\1\0\35\1\11\11\2\1\1\0\1\1\1\11"+
    "\2\0\1\11\1\1\1\11\2\0\1\11\1\0\34\1"+
    "\1\11\1\0\1\1\1\0\2\1\1\0\27\1\1\0"+
    "\1\1\1\0\17\1\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*  Generamos un java_cup.Symbol para guardar el tipo de token 
        encontrado */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Generamos un Symbol para el tipo de token encontrado 
       junto con su valor */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 386) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext());
            }
          case 79: break;
          case 2: 
            { 
            }
          case 80: break;
          case 3: 
            { return new Symbol(sym.NUMERO_ENTERO, yychar, yyline, yytext());
            }
          case 81: break;
          case 4: 
            { return new Symbol(sym.OP_RESTA, yychar, yyline, yytext());
            }
          case 82: break;
          case 5: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 83: break;
          case 6: 
            { return new Symbol(sym.OP_MULTIPLICACION, yychar, yyline, yytext());
            }
          case 84: break;
          case 7: 
            { return new Symbol(sym.OP_SUMA, yychar, yyline, yytext());
            }
          case 85: break;
          case 8: 
            { return new Symbol(sym.OP_DIVISION, yychar, yyline, yytext());
            }
          case 86: break;
          case 9: 
            { return new Symbol(sym.OP_MODULO, yychar, yyline, yytext());
            }
          case 87: break;
          case 10: 
            { return new Symbol(sym.OP_IGUAL, yychar, yyline, yytext());
            }
          case 88: break;
          case 11: 
            { return new Symbol(sym.OP_MAYOR, yychar, yyline, yytext());
            }
          case 89: break;
          case 12: 
            { return new Symbol(sym.OP_MENOR, yychar, yyline, yytext());
            }
          case 90: break;
          case 13: 
            { return new Symbol(sym.OPBITS_AND, yychar, yyline, yytext());
            }
          case 91: break;
          case 14: 
            { return new Symbol(sym.OPBITS_OR, yychar, yyline, yytext());
            }
          case 92: break;
          case 15: 
            { return new Symbol(sym.OPBITS_XOR, yychar, yyline, yytext());
            }
          case 93: break;
          case 16: 
            { return new Symbol(sym.OPBITS_NOT, yychar, yyline, yytext());
            }
          case 94: break;
          case 17: 
            { return new Symbol(sym.SEPARADOR_COMA, yychar, yyline, yytext());
            }
          case 95: break;
          case 18: 
            { return new Symbol(sym.SEPARADOR_DOS_PUNTOS, yychar, yyline, yytext());
            }
          case 96: break;
          case 19: 
            { return new Symbol(sym.CONT_LLAVE_ABRE, yychar, yyline, yytext());
            }
          case 97: break;
          case 20: 
            { return new Symbol(sym.CONT_LLAVE_CIERRA, yychar, yyline, yytext());
            }
          case 98: break;
          case 21: 
            { return new Symbol(sym.CONT_CORCHETE_ABRE, yychar, yyline, yytext());
            }
          case 99: break;
          case 22: 
            { return new Symbol(sym.CONT_CORCHETE_CIERRA, yychar, yyline, yytext());
            }
          case 100: break;
          case 23: 
            { return new Symbol(sym.CONT_PARENTESIS_ABRE, yychar, yyline, yytext());
            }
          case 101: break;
          case 24: 
            { return new Symbol(sym.CONT_PARENTESIS_CIERRA, yychar, yyline, yytext());
            }
          case 102: break;
          case 25: 
            { return new Symbol(sym.Error_Identificador, yychar, yyline, yytext());
            }
          case 103: break;
          case 26: 
            { return new Symbol(sym.NUMERO_LONG, yychar, yyline, yytext());
            }
          case 104: break;
          case 27: 
            { return new Symbol(sym.NUMERO_FLOTANTE, yychar, yyline, yytext());
            }
          case 105: break;
          case 28: 
            { return new Symbol(sym.OP_ASIGNAR_RESTA, yychar, yyline, yytext());
            }
          case 106: break;
          case 29: 
            { return new Symbol(sym.OP_POTENCIA, yychar, yyline, yytext());
            }
          case 107: break;
          case 30: 
            { return new Symbol(sym.OP_ASIGNAR_MULTIPLICACION, yychar, yyline, yytext());
            }
          case 108: break;
          case 31: 
            { return new Symbol(sym.OP_ASIGNAR_SUMA, yychar, yyline, yytext());
            }
          case 109: break;
          case 32: 
            { return new Symbol(sym.STRING, yychar, yyline, yytext());
            }
          case 110: break;
          case 33: 
            { return new Symbol(sym.OP_OR, yychar, yyline, yytext());
            }
          case 111: break;
          case 34: 
            { return new Symbol(sym.COMP_IS, yychar, yyline, yytext());
            }
          case 112: break;
          case 35: 
            { return new Symbol(sym.COMP_IN, yychar, yyline, yytext());
            }
          case 113: break;
          case 36: 
            { return new Symbol(sym.PR_IF, yychar, yyline, yytext());
            }
          case 114: break;
          case 37: 
            { return new Symbol(sym.OP_DIV_ENTERA, yychar, yyline, yytext());
            }
          case 115: break;
          case 38: 
            { return new Symbol(sym.OP_ASIGNAR_DIVISION, yychar, yyline, yytext());
            }
          case 116: break;
          case 39: 
            { return new Symbol(sym.OP_ASIGNAR_MODULO, yychar, yyline, yytext());
            }
          case 117: break;
          case 40: 
            { return new Symbol(sym.OP_COMPARACION_IGUALDAD, yychar, yyline, yytext());
            }
          case 118: break;
          case 41: 
            { return new Symbol(sym.OP_DISTINTO, yychar, yyline, yytext());
            }
          case 119: break;
          case 42: 
            { return new Symbol(sym.OP_MAYORIGUAL, yychar, yyline, yytext());
            }
          case 120: break;
          case 43: 
            { return new Symbol(sym.OPBITS_DESPLAZ_DERECHA, yychar, yyline, yytext());
            }
          case 121: break;
          case 44: 
            { return new Symbol(sym.OP_MENORIGUAL, yychar, yyline, yytext());
            }
          case 122: break;
          case 45: 
            { return new Symbol(sym.OP_DIFERENTE, yychar, yyline, yytext());
            }
          case 123: break;
          case 46: 
            { return new Symbol(sym.OPBITS_DESPLAZ_IZQ, yychar, yyline, yytext());
            }
          case 124: break;
          case 47: 
            { return new Symbol(sym.NUMERO_COMPLEJO, yychar, yyline, yytext());
            }
          case 125: break;
          case 48: 
            { return new Symbol(sym.OP_ASIGNAR_POTENCIA, yychar, yyline, yytext());
            }
          case 126: break;
          case 49: 
            { return new Symbol(sym.OP_AND, yychar, yyline, yytext());
            }
          case 127: break;
          case 50: 
            { return new Symbol(sym.PR_TRY, yychar, yyline, yytext());
            }
          case 128: break;
          case 51: 
            { return new Symbol(sym.OP_NOT, yychar, yyline, yytext());
            }
          case 129: break;
          case 52: 
            { return new Symbol(sym.PR_INT, yychar, yyline, yytext());
            }
          case 130: break;
          case 53: 
            { return new Symbol(sym.PR_DEL, yychar, yyline, yytext());
            }
          case 131: break;
          case 54: 
            { return new Symbol(sym.PR_DEF, yychar, yyline, yytext());
            }
          case 132: break;
          case 55: 
            { return new Symbol(sym.PR_FOR, yychar, yyline, yytext());
            }
          case 133: break;
          case 56: 
            { return new Symbol(sym.OP_ASIGNAR_DIV_ENTERA, yychar, yyline, yytext());
            }
          case 134: break;
          case 57: 
            { return new Symbol(sym.PR_EXEC, yychar, yyline, yytext());
            }
          case 135: break;
          case 58: 
            { return new Symbol(sym.PR_ELSE, yychar, yyline, yytext());
            }
          case 136: break;
          case 59: 
            { return new Symbol(sym.PR_ELIF, yychar, yyline, yytext());
            }
          case 137: break;
          case 60: 
            { return new Symbol(sym.PR_FROM, yychar, yyline, yytext());
            }
          case 138: break;
          case 61: 
            { return new Symbol(sym.PR_PASS, yychar, yyline, yytext());
            }
          case 139: break;
          case 62: 
            { return new Symbol(sym.PR_WITH, yychar, yyline, yytext());
            }
          case 140: break;
          case 63: 
            { return new Symbol(sym.PR_RAISE, yychar, yyline, yytext());
            }
          case 141: break;
          case 64: 
            { return new Symbol(sym.PR_BREAK, yychar, yyline, yytext());
            }
          case 142: break;
          case 65: 
            { return new Symbol(sym.PR_CLASS, yychar, yyline, yytext());
            }
          case 143: break;
          case 66: 
            { return new Symbol(sym.PR_INPUT, yychar, yyline, yytext());
            }
          case 144: break;
          case 67: 
            { return new Symbol(sym.PR_PRINT, yychar, yyline, yytext());
            }
          case 145: break;
          case 68: 
            { return new Symbol(sym.PR_YIELD, yychar, yyline, yytext());
            }
          case 146: break;
          case 69: 
            { return new Symbol(sym.PR_WHILE, yychar, yyline, yytext());
            }
          case 147: break;
          case 70: 
            { return new Symbol(sym.COMENTARIO_BLOQUE, yychar, yyline, yytext());
            }
          case 148: break;
          case 71: 
            { return new Symbol(sym.PR_ASSERT, yychar, yyline, yytext());
            }
          case 149: break;
          case 72: 
            { return new Symbol(sym.PR_EXCEPT, yychar, yyline, yytext());
            }
          case 150: break;
          case 73: 
            { return new Symbol(sym.PR_RETURN, yychar, yyline, yytext());
            }
          case 151: break;
          case 74: 
            { return new Symbol(sym.PR_LAMBDA, yychar, yyline, yytext());
            }
          case 152: break;
          case 75: 
            { return new Symbol(sym.PR_IMPORT, yychar, yyline, yytext());
            }
          case 153: break;
          case 76: 
            { return new Symbol(sym.PR_GLOBAL, yychar, yyline, yytext());
            }
          case 154: break;
          case 77: 
            { return new Symbol(sym.PR_FINALLY, yychar, yyline, yytext());
            }
          case 155: break;
          case 78: 
            { return new Symbol(sym.PR_CONTINUE, yychar, yyline, yytext());
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
