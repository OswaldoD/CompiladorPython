package analizadorSintactico;
import java.io.*;
import java_cup.runtime.*; 


/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;


parser code
{:
    public static void main(String[] args){
        try {
            Symbol asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0]))).parse();
            //Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
  

    public void syntax_error(Symbol s){
	report_error("Error de sintaxis. Linea: " + (s.right + 1) +
	" Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
    }  
:}

/* - - -  Lista de terminales  - - - */

terminal PR_DEF, PR_GLOBAL, PR_IMPORT, PR_LAMBDA, PR_RETURN, PR_EXCEPT, PR_ASSERT,
         PR_WHILE, PR_YIELD, PR_PRINT, PR_INPUT, PR_CLASS, PR_BREAK, PR_RAISE, PR_WITH, PR_PASS, PR_FROM, PR_ELIF,
         PR_ELSE, PR_EXEC, PR_FOR, PR_DEL, PR_INT, PR_IF, PR_TRY, PR_CONTINUE, PR_FINALLY, PR_FLOAT, PR_LIST, PR_STRING,
         PR_BOOLEAN, PR_CHAR, PR_RANGE, PR_LONG, PR_COMPLEX;

terminal CONT_LLAVE_ABRE, CONT_LLAVE_CIERRA, CONT_CORCHETE_ABRE, CONT_CORCHETE_CIERRA, CONT_PARENTESIS_ABRE, 
          CONT_PARENTESIS_CIERRA;

terminal NUMERO_ENTERO, NUMERO_LONG, NUMERO_FLOTANTE, NUMERO_COMPLEJO;

terminal BOOL_TRUE, BOOL_FALSE;

terminal COMA, DOS_PUNTOS, PUNTO_COMA, PUNTO;

terminal IDENTIFICADOR, Error_Identificador, COMENTARIO_BLOQUE, COMENTARIO_LINEA, STRING, COMP_IS, COMP_IN, ERROR;

terminal OP_RESTA, OP_MUL, OP_SUMA, OP_DIV, OP_MOD, OP_POT, OP_DIVENT;

terminal OPBITS_AND, OPBITS_OR, OPBITS_XOR, OPBITS_NOT, OPBITS_DESPLAZ_DERECHA, OPBITS_DESPLAZ_IZQ;

terminal OP_IGUAL, OP_ASG_SUMA, OP_ASG_RESTA, OP_ASG_MUL, OP_ASG_DIV, OP_ASG_MOD, OP_ASG_POT, OP_ASG_DIVENT;

terminal OP_CMPIGUAL, OP_DIST, OP_MAYOR, OP_MENOR, OP_DIF, OP_MAYORIG, OP_MENORIG;

terminal OP_AND, OP_NOT, OP_OR;

non terminal START, FUNCIONES, VARIABLES, MAS_VARIABLES, PROGRAMA_PRINCIPAL, METODOS, VAR_GLOBALES;

non terminal PARAMETROS, MAS_PARAMETROS, BLOQUE_CODIGO, BLOQUE_FUNCION;

non terminal ASIGNACION, OP_ASG, TIPO_DATO, TIPO_NUMERO, TIPO_FUNC, TIPO_LISTA, MAS_TIPO_LISTA, OP_COMPARAR;

non terminal ARITMETICA, MAS_ARITMETICA, COMPARATIVA, MAS_COMPARATIVA;

non terminal EXPRESSION;

/* no terminales que deben probarse con calma
non terminal WHILE_STMT, FOR_STMT;
non terminal IF_STMT, ELIF_STMT, ELSE_STMT;
non terminal TRY_STMT, FINALLY_STMT;
*/


/*------------- Declaraci√≥n de Precedencia y Asociatividad -------------*/

/* START ::= FUNCIONES VARIABLES PROGRAMA_PRINCIPAL */
START ::= FUNCIONES VARIABLES
         |PR_CLASS IDENTIFICADOR DOS_PUNTOS VARIABLES;
     /*     |PR_CLASS IDENTIFICADOR : VARIABLES METODOS VAR_GLOBALES PROGRAMA_PRINCIPAL;*/

FUNCIONES ::= PR_DEF IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_FUNCION PUNTO_COMA FUNCIONES
              | ;

/* Parametros funcion(<n_parametros>) donde n >=0 */
PARAMETROS ::= IDENTIFICADOR MAS_PARAMETROS 
               | ;

MAS_PARAMETROS ::= COMA PARAMETROS 
                   | ;

VARIABLES ::= PR_INT IDENTIFICADOR MAS_VARIABLES VARIABLES
             |PR_FLOAT IDENTIFICADOR MAS_VARIABLES VARIABLES 
             |PR_LONG IDENTIFICADOR MAS_VARIABLES VARIABLES 
             |PR_COMPLEX IDENTIFICADOR MAS_VARIABLES VARIABLES 
             |PR_LIST IDENTIFICADOR MAS_VARIABLES VARIABLES
             |PR_STRING IDENTIFICADOR MAS_VARIABLES VARIABLES
             |PR_BOOLEAN IDENTIFICADOR MAS_VARIABLES VARIABLES
             |PR_CHAR IDENTIFICADOR MAS_VARIABLES VARIABLES
             | ;

MAS_VARIABLES ::= COMA IDENTIFICADOR MAS_VARIABLES
                  | ;

BLOQUE_FUNCION ::= ASIGNACION;

EXPRESSION ::= ARITMETICA
              |COMPARATIVA
              | ;

/* Operadores de Asignacion: =, +=, -+, *=, /=, %=, **=, //= */
ASIGNACION ::= IDENTIFICADOR OP_ASG TIPO_DATO ASIGNACION
              | ;

TIPO_DATO ::= IDENTIFICADOR 
             |TIPO_NUMERO
             |BOOL_TRUE
             |BOOL_FALSE
             |STRING
             |TIPO_LISTA
             |TIPO_FUNC;

TIPO_NUMERO ::= NUMERO_ENTERO
               |NUMERO_FLOTANTE
               |NUMERO_LONG ;

/* Llamado a funciones funcion(<n_parametros>) donde n >=0 */
TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA;

TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA
              |CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA; 

MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA
                  | ;

ARITMETICA ::= TIPO_DATO MAS_ARITMETICA
              | ;

MAS_ARITMETICA ::= OP_SUMA TIPO_DATO MAS_ARITMETICA
                        |OP_RESTA TIPO_DATO MAS_ARITMETICA
                        |OP_MUL TIPO_DATO MAS_ARITMETICA
                        |OP_DIV TIPO_DATO MAS_ARITMETICA
                        |OP_MOD TIPO_DATO MAS_ARITMETICA
                        |OP_POT TIPO_DATO MAS_ARITMETICA
                        |OP_DIVENT TIPO_DATO MAS_ARITMETICA
                        | ;
OP_ASG ::= OP_IGUAL
          |OP_ASG_SUMA
          |OP_ASG_RESTA
          |OP_ASG_MUL 
          |OP_ASG_DIV
          |OP_ASG_MOD
          |OP_ASG_POT
          |OP_ASG_DIVENT;


COMPARATIVA::= TIPO_DATO MAS_COMPARATIVA
              | ;

MAS_COMPARATIVA::= OP_COMPARAR TIPO_DATO MAS_COMPARATIVA
                  | ;

OP_COMPARAR ::= OP_CMPIGUAL
               |OP_DIST
               |OP_MAYOR
               |OP_MENOR
               |OP_DIF
               |OP_MAYORIG
               |OP_MENORIG
               |OP_AND
               |OP_OR
               |OP_NOT;     


/*
A continuacion se definen pedazos de bloque de codigo, las probaremos con calma
de una en una teniendo cuidad con los shift-reduce 

Sentencia while faltan while true while false

WHILE_STMT ::= PR_WHILE COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA;

Sentencia for

FOR_STMT ::= PR_FOR IDENTIFICADOR COMP_IN PR_RANGE CONT_PARENTESIS_ABRE IDENTIFICADOR CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA;

Sentencia if-elif-else

IF_STMT ::= PR_IF COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA ELIF_STMT ELSE_STMT

ELIF_STMR ::= PR_ELIF COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
              | ;

ELSE_STMT ::= PR_ELSE DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
              | ;

Sentencia try - finally - catch

TRY_STMT ::= PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA PR_CATCH IDENTIFICADOR DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA FINALLY_STMT;

FINALLY_STMT ::= PR_FINALLY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
                 | ;




*/

