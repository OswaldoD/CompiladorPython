package analizadorSintactico;
import java.io.*;
import java_cup.runtime.*; 


/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;


parser code
{:
    public static void main(String[] args){
        try {
            Symbol asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0]))).parse();
            //Object result = asin.parse().value;
            System.out.println("\n*** Resultados finales ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
  

    public void syntax_error(Symbol s){
	report_error("Error de sintaxis. Linea: " + (s.right + 1) + ". Texto: \"" + s.value + "\"", null);

    }  
:}

/* - - -  Lista de terminales  - - - */

terminal PR_DEF, PR_GLOBAL, PR_IMPORT, PR_LAMBDA, PR_RETURN, PR_EXCEPT, PR_ASSERT, 
         PR_WHILE, PR_YIELD, PR_PRINT, PR_INPUT, PR_CLASS, PR_BREAK, PR_RAISE, 
         PR_WITH, PR_PASS, PR_FROM, PR_ELIF, PR_ELSE, PR_EXEC, PR_FOR, PR_DEL, 
         PR_INT, PR_IF, PR_TRY, PR_CONTINUE, PR_FINALLY, PR_FLOAT, PR_LIST, PR_STRING,
         PR_BOOLEAN, PR_CHAR, PR_RANGE, PR_LONG, PR_COMPLEX;

terminal CONT_LLAVE_ABRE, CONT_LLAVE_CIERRA, CONT_CORCHETE_ABRE, CONT_CORCHETE_CIERRA, CONT_PARENTESIS_ABRE, 
          CONT_PARENTESIS_CIERRA;

terminal NUMERO_ENTERO, NUMERO_LONG, NUMERO_FLOTANTE, NUMERO_COMPLEJO;

terminal BOOL_TRUE, BOOL_FALSE;

terminal COMA, DOS_PUNTOS, PUNTO_COMA, PUNTO;

terminal IDENTIFICADOR, Error_Identificador, COMENTARIO_BLOQUE, COMENTARIO_LINEA, STRING, COMP_IS, COMP_IN, ERROR;

terminal OP_RESTA, OP_MUL, OP_SUMA, OP_DIV, OP_MOD, OP_POT, OP_DIVENT;

terminal OPBITS_AND, OPBITS_OR, OPBITS_XOR, OPBITS_NOT, OPBITS_DESPLAZ_DERECHA, OPBITS_DESPLAZ_IZQ;

terminal OP_IGUAL, OP_ASG_SUMA, OP_ASG_RESTA, OP_ASG_MUL, OP_ASG_DIV, OP_ASG_MOD, OP_ASG_POT, OP_ASG_DIVENT;

terminal OP_CMPIGUAL, OP_DIST, OP_MAYOR, OP_MENOR, OP_DIF, OP_MAYORIG, OP_MENORIG;

terminal OP_AND, OP_NOT, OP_OR;

non terminal START, FUNCIONES, VARIABLES, MAS_VARIABLES, PR_TIPO_DATO;

non terminal PARAMETROS, MAS_PARAMETROS, BLOQUE_CODIGO, TIPO_BLOQUE;

non terminal ASIGNACION, MAS_ASIGNACION,OP_ARIT, OP_ASG, TIPO_DATO, TIPO_NUMERO, TIPO_FUNC, TIPO_LISTA, MAS_TIPO_LISTA, OP_COMPARAR;

non terminal ARITMETICA, MAS_ARITMETICA, TMAS_ARITMETICA, COMPARATIVA, MAS_COMPARATIVA, TMAS_COMPARATIVA;

non terminal EXPRESSION, TERMINADOR;


non terminal WHILE_STMT, FOR_STMT;


non terminal IF_STMT, ELIF_STMT, ELSE_STMT;

/* no terminales que deben probarse con calma */
non terminal TRY_STMT, FINALLY_STMT;

non terminal PRINT, MAS_PRINT, INPUT;

/*------------- Declaraci√≥n de Precedencia y Asociatividad -------------*/
precedence left CONT_PARENTESIS_ABRE, CONT_PARENTESIS_CIERRA;
precedence left DOS_PUNTOS, PUNTO, PUNTO_COMA, COMA, IDENTIFICADOR;


/*---------------------------------------------------------------------------------------------------------------------*/
START ::= FUNCIONES VARIABLES BLOQUE_CODIGO
         |PR_CLASS IDENTIFICADOR DOS_PUNTOS VARIABLES FUNCIONES BLOQUE_CODIGO;

FUNCIONES ::= PR_DEF IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_CODIGO TERMINADOR FUNCIONES
             |PR_DEF error
             | ;


/*-------- Parametros funcion(<n_parametros>) donde n >=0 ---------------*/
PARAMETROS ::= IDENTIFICADOR MAS_PARAMETROS 
              | ;

MAS_PARAMETROS ::= COMA PARAMETROS 
                   | ;

/*-------------------- Variables --------------------*/
VARIABLES ::= PR_TIPO_DATO IDENTIFICADOR MAS_VARIABLES VARIABLES
             |error VARIABLES /*duda*/
           /*  |error */
             | ;

MAS_VARIABLES ::= COMA IDENTIFICADOR MAS_VARIABLES
                 |COMA error
                 | ;

/*--------------------  BLOQUE DE CODIGO -------------------- */
BLOQUE_CODIGO ::= ASIGNACION TIPO_BLOQUE;

TIPO_BLOQUE ::= PRINT BLOQUE_CODIGO
               |INPUT BLOQUE_CODIGO
               |FOR_STMT BLOQUE_CODIGO
               |WHILE_STMT BLOQUE_CODIGO
               |IF_STMT BLOQUE_CODIGO
               |TRY_STMT BLOQUE_CODIGO
               | ;

/*------------------ Asignaciones : =, +=, -+, *=, /=, %=, **=, //= */
ASIGNACION ::= IDENTIFICADOR MAS_ASIGNACION
              | ;

MAS_ASIGNACION ::= OP_ASG EXPRESSION ASIGNACION
                  |error ASIGNACION;

/*------------------ Expresiones ------------------*/
EXPRESSION ::= ARITMETICA
              |COMPARATIVA;

/*------------------ Aritmetica ------------------*/
ARITMETICA ::= CONT_PARENTESIS_ABRE TIPO_DATO MAS_ARITMETICA
              |TIPO_DATO MAS_ARITMETICA ;

MAS_ARITMETICA ::= OP_ARIT TIPO_DATO TMAS_ARITMETICA
                  |error TIPO_DATO TMAS_ARITMETICA
                  | ;

TMAS_ARITMETICA ::= CONT_PARENTESIS_CIERRA MAS_ARITMETICA
                   |MAS_ARITMETICA;

/*------------------ Comparativa ------------------*/
COMPARATIVA::= TIPO_DATO MAS_COMPARATIVA
              |CONT_PARENTESIS_ABRE TIPO_DATO MAS_COMPARATIVA;

MAS_COMPARATIVA::= OP_COMPARAR TIPO_DATO TMAS_COMPARATIVA
                  |error COMPARATIVA;

TMAS_COMPARATIVA ::= CONT_PARENTESIS_CIERRA TMAS_COMPARATIVA
                    |MAS_COMPARATIVA
                    | ;

/*--------------------  Sentencia while --------------------*/

WHILE_STMT ::= PR_WHILE CONT_PARENTESIS_ABRE COMPARATIVA CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
              |PR_WHILE CONT_PARENTESIS_ABRE BOOL_TRUE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
              |PR_WHILE CONT_PARENTESIS_ABRE BOOL_FALSE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
              |PR_WHILE error ;

/*-------------------- Sentencia for --------------------*/

FOR_STMT ::= PR_FOR IDENTIFICADOR COMP_IN PR_RANGE CONT_PARENTESIS_ABRE EXPRESSION CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
            |PR_FOR error;


/*-------------------- Sentencia if-elif-else --------------------*/

IF_STMT ::= PR_IF COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA ELIF_STMT ELSE_STMT
           |PR_IF error;


ELIF_STMT ::= PR_ELIF COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             |PR_ELIF error
             | ;

ELSE_STMT ::= PR_ELSE DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             |PR_ELSE error
             | ;

/*-------------------- Sentencia try - finally - catch --------------------*/

TRY_STMT ::= PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA PR_EXCEPT IDENTIFICADOR DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA FINALLY_STMT
            |PR_TRY error
            |PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA error;

FINALLY_STMT ::= PR_FINALLY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
                |PR_FINALLY error
                | ;

/*-------------------- PRINT -------------------*/
PRINT ::= PR_PRINT CONT_PARENTESIS_ABRE EXPRESSION MAS_PRINT CONT_PARENTESIS_CIERRA
         |PR_PRINT error;

MAS_PRINT ::= COMA EXPRESSION MAS_PRINT
             | ;

/*-------------------- INPUT -------------------*/
INPUT ::= PR_INPUT CONT_PARENTESIS_ABRE IDENTIFICADOR CONT_PARENTESIS_CIERRA
         |PR_INPUT CONT_PARENTESIS_ABRE error
         |PR_INPUT error;
   
PR_TIPO_DATO ::= PR_INT 
                |PR_FLOAT 
                |PR_LONG 
                |PR_COMPLEX  
                |PR_LIST 
                |PR_STRING
                |PR_BOOLEAN
                |PR_CHAR;

TIPO_DATO ::= IDENTIFICADOR 
             |TIPO_NUMERO
             |BOOL_TRUE
             |BOOL_FALSE
             |STRING
             |TIPO_LISTA
             |TIPO_FUNC;

TIPO_NUMERO ::= NUMERO_ENTERO
               |NUMERO_FLOTANTE
               |NUMERO_COMPLEJO
               |NUMERO_LONG ;

/* Llamado a funciones funcion(<n_parametros>) donde n >=0 */
TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA
             |IDENTIFICADOR error ;


TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA
              |CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA
              |CONT_CORCHETE_ABRE error; 

MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA
                  |error TIPO_DATO MAS_TIPO_LISTA
                  | ;

OP_ARIT ::= OP_SUMA
           |OP_RESTA 
           |OP_MUL 
           |OP_DIV 
           |OP_MOD 
           |OP_POT 
           |OP_DIVENT;

OP_ASG ::= OP_IGUAL
          |OP_ASG_SUMA
          |OP_ASG_RESTA
          |OP_ASG_MUL 
          |OP_ASG_DIV
          |OP_ASG_MOD
          |OP_ASG_POT
          |OP_ASG_DIVENT;

OP_COMPARAR ::= OP_CMPIGUAL
               |OP_DIST
               |OP_MAYOR
               |OP_MENOR
               |OP_DIF
               |OP_MAYORIG
               |OP_MENORIG
               |OP_AND
               |OP_OR
               |OP_NOT;     

TERMINADOR ::= PUNTO_COMA;