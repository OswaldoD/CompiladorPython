package analizadorSintactico;
import java.io.*;
import java.util.ArrayList;
import java.util.Stack;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
import analizadorSintactico.Datos_Guardados;
import analizadorSintactico.FileManager;


action code{:
    ArrayList<Datos_Guardados> tabla_simbolos = new ArrayList<Datos_Guardados>();
    Stack<String> pilaSemantica = new Stack<String>();
    String tipoDato="";
    String identificador="";
    String valorDato="";
    String scope="";
    int terminacion = 1;
    FileManager archivo_salida = new FileManager();


    public void buscarRepetidos(Datos_Guardados datos){
        for(int i=0; i<tabla_simbolos.size(); i++ ){
            String identificadorIngresar="";
            if(tabla_simbolos.get(i).getIdentificador().equals(identificadorIngresar)){
                //no se inserta nada
            }
            else{
                tabla_simbolos.add(datos);
            }
        }
    }  
:}

parser code 
{:
   public FileManager archivo_salida;
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
               // m.append(" in columna "+(s.left+1));
                if (s.right >= 0)
                    m.append(", en linea "+(s.right+1));
                    m.append(", texto \""+ s.value +"\"");
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void writeFile(){
         archivo_salida.fileWritter();
    }

    public void setArchivo(FileManager archivo_salida){
        this.archivo_salida = archivo_salida;
    }
    

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
 static boolean do_debug_parse = false;
    public static void main(String[] args){
        try {
            AnalizadorSintactico asin = new AnalizadorSintactico(
                    new AnalizadorLexico( new FileReader(args[0])));
            Object table=null;
            if(do_debug_parse){
                table=asin.debug_parse();
            }
            else{
                table=asin.parse().value;
                //System.out.print("Que hay parse_tree: "+asin.parse().value);
            }  
            
            System.out.print("Que hay table: "+asin.parse().value);
            System.out.println("\n*** Resultados finales ***");

//        for(int i=0; i<=tabla_simbolos.size(); i++ ){
//            System.out.println("Tipo: "+tabla_simbolos.get(i).getTipo()+" | Identificador: "+tabla_simbolos.get(i).getIdentificador()+
//                                " | Valor: "+tabla_simbolos.get(i).getValor()+ " | Scope:"+ tabla_simbolos.get(i).getScope());
//        }
      //    asin.writeFile();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } 
:}

/* - - -  Lista de terminales  - - - */

terminal PR_DEF, PR_GLOBAL, PR_IMPORT, PR_LAMBDA, PR_RETURN, PR_EXCEPT, PR_ASSERT, 
         PR_WHILE, PR_YIELD, PR_PRINT, PR_INPUT, PR_CLASS, PR_BREAK, PR_RAISE, 
         PR_WITH, PR_PASS, PR_FROM, PR_ELIF, PR_ELSE, PR_EXEC, PR_FOR, PR_DEL, 
         PR_INT, PR_IF, PR_TRY, PR_CONTINUE, PR_FINALLY, PR_FLOAT, PR_LIST, PR_STRING,
         PR_BOOLEAN, PR_CHAR, PR_RANGE, PR_LONG, PR_COMPLEX;

terminal CONT_LLAVE_ABRE, CONT_LLAVE_CIERRA, CONT_CORCHETE_ABRE, CONT_CORCHETE_CIERRA, CONT_PARENTESIS_ABRE, 
          CONT_PARENTESIS_CIERRA;

terminal NUMERO_ENTERO, NUMERO_LONG, NUMERO_FLOTANTE, NUMERO_COMPLEJO;

terminal BOOL_TRUE, BOOL_FALSE;

terminal COMA, DOS_PUNTOS, PUNTO_COMA, PUNTO;

terminal IDENTIFICADOR, Error_Identificador, COMENTARIO_BLOQUE, COMENTARIO_LINEA, STRING, COMP_IS, COMP_IN, ERROR;

terminal OP_RESTA, OP_MUL, OP_SUMA, OP_DIV, OP_MOD, OP_POT, OP_DIVENT;

terminal OPBITS_AND, OPBITS_OR, OPBITS_XOR, OPBITS_NOT, OPBITS_DESPLAZ_DERECHA, OPBITS_DESPLAZ_IZQ;

terminal OP_IGUAL, OP_ASG_SUMA, OP_ASG_RESTA, OP_ASG_MUL, OP_ASG_DIV, OP_ASG_MOD, OP_ASG_POT, OP_ASG_DIVENT;

terminal OP_CMPIGUAL, OP_DIST, OP_MAYOR, OP_MENOR, OP_DIF, OP_MAYORIG, OP_MENORIG;

terminal OP_AND, OP_NOT, OP_OR;

non terminal START, FUNCIONES, VARIABLES, MAS_VARIABLES, PR_TIPO_DATO;

non terminal PARAMETROS, MAS_PARAMETROS, BLOQUE_CODIGO, TIPO_BLOQUE;

non terminal ASIGNACION, MAS_ASIGNACION,OP_ARIT, OP_ASG, TIPO_DATO, TIPO_NUMERO, TIPO_FUNC, TIPO_LISTA, MAS_TIPO_LISTA, OP_COMPARAR;

non terminal ARITMETICA, MAS_ARITMETICA, TMAS_ARITMETICA, COMPARATIVA, MAS_COMPARATIVA, TMAS_COMPARATIVA;

non terminal EXPRESSION, TERMINADOR;

non terminal WHILE_STMT, FOR_STMT;

non terminal IF_STMT, ELIF_STMT, ELSE_STMT;

non terminal INITIAL;

/* no terminales que deben probarse con calma */
non terminal TRY_STMT, FINALLY_STMT;

non terminal PRINT, MAS_PRINT, INPUT;

/*------------- DeclaraciÃ³n de Precedencia y Asociatividad -------------*/
precedence left CONT_PARENTESIS_ABRE, CONT_PARENTESIS_CIERRA;
precedence left DOS_PUNTOS, PUNTO, PUNTO_COMA, COMA, IDENTIFICADOR;

/*---------------------------------------------------------------------------------------------------------------------*/

INITIAL ::= FUNCIONES VARIABLES:global {: archivo_salida.endSegDatos(); :} BLOQUE_CODIGO {:pilaSemantica.push("Global");
                                                   Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
                                                   buscarRepetidos(datos_simbolo);
                                                   //tabla_simbolos.add(datos_simbolo);
                                                   System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                                                   :} {: archivo_salida.fileWritter(); :}

                                                                                                     
         |PR_CLASS:clase IDENTIFICADOR:id DOS_PUNTOS VARIABLES:local FUNCIONES BLOQUE_CODIGO 
         {: tipoDato=clase.toString();
         identificador=id.toString();
         pilaSemantica.push("Global");
         Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
         buscarRepetidos(datos_simbolo);
         //tabla_simbolos.add(datos_simbolo);
         System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
         :}; 

FUNCIONES ::= PR_DEF:def IDENTIFICADOR:id CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA DOS_PUNTOS VARIABLES BLOQUE_CODIGO TERMINADOR FUNCIONES 
             {:pilaSemantica.push("Global"); 
             tipoDato=def.toString();
             identificador=id.toString();
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
            System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
             |PR_DEF error
             | ;

/*-------- Parametros funcion(<n_parametros>) donde n >=0 ---------------*/
PARAMETROS ::= PR_TIPO_DATO IDENTIFICADOR:id MAS_PARAMETROS 
               {:pilaSemantica.push("Local"); 
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
               buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
               System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               :}               
              | ; 

MAS_PARAMETROS ::= COMA PR_TIPO_DATO IDENTIFICADOR:id MAS_PARAMETROS 
                   {:pilaSemantica.push("Local");                   
                   identificador=id.toString();               
                   Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                    buscarRepetidos(datos_simbolo);
                    //tabla_simbolos.add(datos_simbolo);
                  // System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                   :}
                   | ;

/*-------------------- Variables --------------------*/
VARIABLES ::= PR_TIPO_DATO IDENTIFICADOR:id MAS_VARIABLES VARIABLES  
              {:pilaSemantica.push("Local"); 
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                buscarRepetidos(datos_simbolo);
                //tabla_simbolos.add(datos_simbolo);
               System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               :}
             |error VARIABLES /*duda*/
           /*  |error */
             |;

MAS_VARIABLES ::= COMA IDENTIFICADOR:id MAS_VARIABLES
                {:pilaSemantica.push("Local"); 
                identificador=id.toString(); 
                Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
                buscarRepetidos(datos_simbolo);
                //tabla_simbolos.add(datos_simbolo);
                System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
                :}
                 |COMA error
                 | ;

/*--------------------  BLOQUE DE CODIGO -------------------- */
BLOQUE_CODIGO ::= ASIGNACION TIPO_BLOQUE;

TIPO_BLOQUE ::= PRINT BLOQUE_CODIGO
               |INPUT BLOQUE_CODIGO
               |FOR_STMT BLOQUE_CODIGO
               |WHILE_STMT BLOQUE_CODIGO
               |IF_STMT BLOQUE_CODIGO
               |TRY_STMT BLOQUE_CODIGO
               |TIPO_FUNC BLOQUE_CODIGO /* llamar funciones */
               | ;

/*------------------ Asignaciones : =, +=, -+, *=, /=, %=, **=, //= */
ASIGNACION ::= IDENTIFICADOR:id MAS_ASIGNACION
              | ;

MAS_ASIGNACION ::= OP_ASG EXPRESSION ASIGNACION
                  |error ASIGNACION;

/*------------------ Expresiones ------------------*/
EXPRESSION ::= ARITMETICA
              |COMPARATIVA;

/*------------------ Aritmetica ------------------*/
ARITMETICA ::= CONT_PARENTESIS_ABRE TIPO_DATO MAS_ARITMETICA
              |TIPO_DATO MAS_ARITMETICA ;

MAS_ARITMETICA ::= OP_ARIT TIPO_DATO TMAS_ARITMETICA
                  |error TIPO_DATO TMAS_ARITMETICA
                  | ;

TMAS_ARITMETICA ::= CONT_PARENTESIS_CIERRA MAS_ARITMETICA
                   |MAS_ARITMETICA;

/*------------------ Comparativa ------------------*/
COMPARATIVA::= TIPO_DATO MAS_COMPARATIVA
              |CONT_PARENTESIS_ABRE TIPO_DATO MAS_COMPARATIVA;

MAS_COMPARATIVA::= OP_COMPARAR TIPO_DATO TMAS_COMPARATIVA
                  |error COMPARATIVA;

TMAS_COMPARATIVA ::= CONT_PARENTESIS_CIERRA TMAS_COMPARATIVA
                    |MAS_COMPARATIVA
                    | ;

/*--------------------  Sentencia while --------------------*/

WHILE_STMT ::= PR_WHILE:pr_while CONT_PARENTESIS_ABRE COMPARATIVA CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             {:pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
              |PR_WHILE:pr_while CONT_PARENTESIS_ABRE BOOL_TRUE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             {:pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
              |PR_WHILE:pr_while CONT_PARENTESIS_ABRE BOOL_FALSE CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             {:pilaSemantica.push("Local"); 
             tipoDato=pr_while.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
              |PR_WHILE error ;

/*-------------------- Sentencia for --------------------*/

FOR_STMT ::= PR_FOR:pr_for IDENTIFICADOR:id COMP_IN PR_RANGE CONT_PARENTESIS_ABRE EXPRESSION CONT_PARENTESIS_CIERRA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             {:pilaSemantica.push("Local"); 
             tipoDato=pr_for.toString();
             identificador=id.toString();
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
            |PR_FOR error;


/*-------------------- Sentencia if-elif-else --------------------*/

IF_STMT ::= PR_IF:pr_if {: String etiqueta1 = archivo_salida.getEtiqueta(); 
archivo_salida.incCont(); 
System.out.println(etiqueta1);
archivo_salida.almacenaIF(etiqueta1 + ":");
archivo_salida.almacenaIF("; codigo de if"); 
pilaSemantica.push(archivo_salida.getEtiqueta());
archivo_salida.incCont();
pilaSemantica.push(archivo_salida.getEtiqueta()); 
archivo_salida.incCont(); :} COMPARATIVA:test_if {: archivo_salida.almacenaIF("; comparativa"); archivo_salida.almacenaIF("jnz " + pilaSemantica.peek()); :} DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA ELIF_STMT ELSE_STMT
           |PR_IF error;

ELIF_STMT ::= PR_ELIF:pr_elif COMPARATIVA DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
             |PR_ELIF error
             | ;

ELSE_STMT ::= PR_ELSE:pr_else {: 
String s = pilaSemantica.pop();
archivo_salida.almacenaIF("jmp " + pilaSemantica.peek()); 
archivo_salida.almacenaIF(s + ":"); 

:} DOS_PUNTOS {: archivo_salida.almacenaIF("; bloque else"); :} BLOQUE_CODIGO PUNTO_COMA {: archivo_salida.almacenaIF(pilaSemantica.pop() + ":"); archivo_salida.almacenaIF("; BLOQUE SALIR"); :}
             |PR_ELSE error
             | ;

/*-------------------- Sentencia try - finally - catch --------------------*/

TRY_STMT ::= PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA PR_EXCEPT IDENTIFICADOR DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA FINALLY_STMT
            |PR_TRY error
            |PR_TRY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA error;

FINALLY_STMT ::= PR_FINALLY DOS_PUNTOS BLOQUE_CODIGO PUNTO_COMA
                |PR_FINALLY error
                | ;

/*-------------------- PRINT -------------------*/
PRINT ::= PR_PRINT:pr_print CONT_PARENTESIS_ABRE EXPRESSION MAS_PRINT CONT_PARENTESIS_CIERRA
               {:pilaSemantica.push("Local"); 
               tipoDato=pr_print.toString();                             
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop());
               //buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
               //System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               :}
         |PR_PRINT error;

MAS_PRINT ::= COMA EXPRESSION MAS_PRINT
             | ;

/*-------------------- INPUT -------------------*/
INPUT ::= PR_INPUT:pr_input CONT_PARENTESIS_ABRE IDENTIFICADOR:id CONT_PARENTESIS_CIERRA
               {:pilaSemantica.push("Local");
               tipoDato=pr_input.toString();
               identificador=id.toString();               
               Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,identificador,"",scope=pilaSemantica.pop());
               //buscarRepetidos(datos_simbolo);
               //tabla_simbolos.add(datos_simbolo);
              // System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
               :}
         |PR_INPUT CONT_PARENTESIS_ABRE error
         |PR_INPUT error;
   
PR_TIPO_DATO ::= PR_INT:tipo  {: tipoDato=tipo.toString(); :}
                |PR_FLOAT:tipo  {: tipoDato=tipo.toString(); :}
                |PR_LONG:tipo  {: tipoDato=tipo.toString(); :}
                |PR_COMPLEX:tipo  {: tipoDato=tipo.toString(); :}  
                |PR_LIST:tipo  {: tipoDato=tipo.toString(); :} 
                |PR_STRING:tipo  {: tipoDato=tipo.toString(); :}
                |PR_BOOLEAN:tipo  {: tipoDato=tipo.toString(); :}
                |PR_CHAR:tipo  {: tipoDato=tipo.toString(); :} ;

TIPO_DATO ::= IDENTIFICADOR 
             |TIPO_NUMERO
             |BOOL_TRUE
             |BOOL_FALSE
             |STRING
             |TIPO_LISTA
             |TIPO_FUNC;

TIPO_NUMERO ::= NUMERO_ENTERO:valor {:valorDato=valor.toString();:}
               |NUMERO_FLOTANTE:valor {:valorDato=valor.toString();:}
               |NUMERO_COMPLEJO:valor {:valorDato=valor.toString();:}
               |NUMERO_LONG:valor {:valorDato=valor.toString();:} ;

/* Llamado a funciones funcion(<n_parametros>) donde n >=0 */
TIPO_FUNC ::= IDENTIFICADOR CONT_PARENTESIS_ABRE PARAMETROS CONT_PARENTESIS_CIERRA
             |IDENTIFICADOR error ;


TIPO_LISTA ::= CONT_CORCHETE_ABRE TIPO_DATO MAS_TIPO_LISTA CONT_CORCHETE_CIERRA
              |CONT_CORCHETE_ABRE CONT_CORCHETE_CIERRA
              |CONT_CORCHETE_ABRE error; 

MAS_TIPO_LISTA ::= COMA TIPO_DATO MAS_TIPO_LISTA
                  |error TIPO_DATO MAS_TIPO_LISTA
                  | ;

OP_ARIT ::= OP_SUMA:suma
             {:pilaSemantica.push("Local"); 
             tipoDato=suma.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
           |OP_RESTA:resta
             {:pilaSemantica.push("Local"); 
             tipoDato=resta.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
           |OP_MUL:multiplicacion
             {:pilaSemantica.push("Local"); 
             tipoDato=multiplicacion.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             //buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :} 
           |OP_DIV:division
             {:pilaSemantica.push("Local"); 
             tipoDato=division.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :} 
           |OP_MOD:modulo
             {:pilaSemantica.push("Local"); 
             tipoDato=modulo.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :} 
           |OP_POT:potencia 
             {:pilaSemantica.push("Local"); 
             tipoDato=potencia.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
           |OP_DIVENT:divisionEntera
             {:pilaSemantica.push("Local"); 
             tipoDato=divisionEntera.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :};

OP_ASG ::= OP_IGUAL:igual
             {:pilaSemantica.push("Local"); 
             tipoDato=igual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_SUMA:asigSuma
             {:pilaSemantica.push("Local"); 
             tipoDato=asigSuma.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_RESTA:asigResta
             {:pilaSemantica.push("Local"); 
             tipoDato=asigResta.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_MUL:asigMulti 
             {:pilaSemantica.push("Local"); 
             tipoDato=asigMulti.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_DIV:asigDiv
             {:pilaSemantica.push("Local"); 
             tipoDato=asigDiv.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_MOD:asigMod
             {:pilaSemantica.push("Local"); 
             tipoDato=asigMod.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_POT:asigPot
             {:pilaSemantica.push("Local"); 
             tipoDato=asigPot.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
          |OP_ASG_DIVENT:asigDivEnt
             {:pilaSemantica.push("Local"); 
             tipoDato=asigDivEnt.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :};

OP_COMPARAR ::= OP_CMPIGUAL:cmpIgual
             {:pilaSemantica.push("Local"); 
             tipoDato=cmpIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_DIST:dist
             {:pilaSemantica.push("Local"); 
             tipoDato=dist.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_MAYOR:mayor
             {:pilaSemantica.push("Local"); 
             tipoDato=mayor.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_MENOR:menor
             {:pilaSemantica.push("Local"); 
             tipoDato=menor.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_DIF:dif
             {:pilaSemantica.push("Local"); 
             tipoDato=dif.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_MAYORIG:mayorIgual
             {:pilaSemantica.push("Local"); 
             tipoDato=mayorIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_MENORIG:menorIgual
             {:pilaSemantica.push("Local"); 
             tipoDato=menorIgual.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_AND:and
             {:pilaSemantica.push("Local"); 
             tipoDato=and.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_OR:or
             {:pilaSemantica.push("Local"); 
             tipoDato=or.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :}
               |OP_NOT:not
             {:pilaSemantica.push("Local"); 
             tipoDato=not.toString();            
             Datos_Guardados datos_simbolo = new Datos_Guardados(tipoDato,"","",scope=pilaSemantica.pop()); 
             buscarRepetidos(datos_simbolo);
             //tabla_simbolos.add(datos_simbolo);
             System.out.println("Tipo Dato: "+ tipoDato + " | Identificador: " + identificador+" Scope: "+scope ); 
             :};     

TERMINADOR ::= PUNTO_COMA;